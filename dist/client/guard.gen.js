/* eslint-disable */
// sequence-guard v0.4.0 b62e755c3f81d6b5a8e7462abc063a57a744cdef
// --
// Code generated by webrpc-gen@v0.25.3 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=guard.ridl -target=typescript -client -out=./clients/guard.gen.ts
export const WebrpcHeader = 'Webrpc';
export const WebrpcHeaderValue = 'webrpc@v0.25.3;gen-typescript@v0.17.0;sequence-guard@v0.4.0';
// WebRPC description and code-gen version
export const WebRPCVersion = 'v1';
// Schema version of your RIDL schema
export const WebRPCSchemaVersion = 'v0.4.0';
// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = 'b62e755c3f81d6b5a8e7462abc063a57a744cdef';
export function VersionFromHeader(headers) {
    const headerValue = headers.get(WebrpcHeader);
    if (!headerValue) {
        return {
            webrpcGenVersion: '',
            codeGenName: '',
            codeGenVersion: '',
            schemaName: '',
            schemaVersion: '',
        };
    }
    return parseWebrpcGenVersions(headerValue);
}
function parseWebrpcGenVersions(header) {
    const versions = header.split(';');
    if (versions.length < 3) {
        return {
            webrpcGenVersion: '',
            codeGenName: '',
            codeGenVersion: '',
            schemaName: '',
            schemaVersion: '',
        };
    }
    const [_, webrpcGenVersion] = versions[0].split('@');
    const [codeGenName, codeGenVersion] = versions[1].split('@');
    const [schemaName, schemaVersion] = versions[2].split('@');
    return {
        webrpcGenVersion: webrpcGenVersion ?? '',
        codeGenName: codeGenName ?? '',
        codeGenVersion: codeGenVersion ?? '',
        schemaName: schemaName ?? '',
        schemaVersion: schemaVersion ?? '',
    };
}
//
// Types
//
export var PayloadType;
(function (PayloadType) {
    PayloadType["Calls"] = "Calls";
    PayloadType["Message"] = "Message";
    PayloadType["ConfigUpdate"] = "ConfigUpdate";
    PayloadType["SessionImplicitAuthorize"] = "SessionImplicitAuthorize";
})(PayloadType || (PayloadType = {}));
export var SignatureType;
(function (SignatureType) {
    SignatureType["Hash"] = "Hash";
    SignatureType["Sapient"] = "Sapient";
    SignatureType["EthSign"] = "EthSign";
    SignatureType["Erc1271"] = "Erc1271";
})(SignatureType || (SignatureType = {}));
//
// Client
//
export class Guard {
    hostname;
    fetch;
    path = '/rpc/Guard/';
    constructor(hostname, fetch) {
        this.hostname = hostname.replace(/\/*$/, '');
        this.fetch = (input, init) => fetch(input, init);
    }
    url(name) {
        return this.hostname + this.path + name;
    }
    ping = (headers, signal) => {
        return this.fetch(this.url('Ping'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    status: _data.status,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    version = (headers, signal) => {
        return this.fetch(this.url('Version'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    version: _data.version,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    runtimeStatus = (headers, signal) => {
        return this.fetch(this.url('RuntimeStatus'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    status: _data.status,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getSignerConfig = (args, headers, signal) => {
        return this.fetch(this.url('GetSignerConfig'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    signerConfig: _data.signerConfig,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sign = (args, headers, signal) => {
        return this.fetch(this.url('Sign'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    sig: _data.sig,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    signWith = (args, headers, signal) => {
        return this.fetch(this.url('SignWith'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    sig: _data.sig,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    patch = (args, headers, signal) => {
        return this.fetch(this.url('Patch'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    txs: _data.txs,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    authMethods = (args, headers, signal) => {
        return this.fetch(this.url('AuthMethods'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    methods: _data.methods,
                    active: _data.active,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    setPIN = (args, headers, signal) => {
        return this.fetch(this.url('SetPIN'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    resetPIN = (args, headers, signal) => {
        return this.fetch(this.url('ResetPIN'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    createTOTP = (args, headers, signal) => {
        return this.fetch(this.url('CreateTOTP'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    uri: _data.uri,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    commitTOTP = (args, headers, signal) => {
        return this.fetch(this.url('CommitTOTP'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    codes: _data.codes,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    resetTOTP = (args, headers, signal) => {
        return this.fetch(this.url('ResetTOTP'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    reset2FA = (args, headers, signal) => {
        return this.fetch(this.url('Reset2FA'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    recoveryCodes = (args, headers, signal) => {
        return this.fetch(this.url('RecoveryCodes'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    codes: _data.codes,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    resetRecoveryCodes = (args, headers, signal) => {
        return this.fetch(this.url('ResetRecoveryCodes'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    codes: _data.codes,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
}
const createHTTPRequest = (body = {}, headers = {}, signal = null) => {
    const reqHeaders = { ...headers, 'Content-Type': 'application/json' };
    reqHeaders[WebrpcHeader] = WebrpcHeaderValue;
    return {
        method: 'POST',
        headers: reqHeaders,
        body: JSON.stringify(body || {}),
        signal,
    };
};
const buildResponse = (res) => {
    return res.text().then((text) => {
        let data;
        try {
            data = JSON.parse(text);
        }
        catch (error) {
            let message = '';
            if (error instanceof Error) {
                message = error.message;
            }
            throw WebrpcBadResponseError.new({
                status: res.status,
                cause: `JSON.parse(): ${message}: response text: ${text}`,
            });
        }
        if (!res.ok) {
            const code = typeof data.code === 'number' ? data.code : 0;
            throw (webrpcErrorByCode[code] || WebrpcError).new(data);
        }
        return data;
    });
};
//
// Errors
//
export class WebrpcError extends Error {
    name;
    code;
    message;
    status;
    cause;
    /** @deprecated Use message instead of msg. Deprecated in webrpc v0.11.0. */
    msg;
    constructor(name, code, message, status, cause) {
        super(message);
        this.name = name || 'WebrpcError';
        this.code = typeof code === 'number' ? code : 0;
        this.message = message || `endpoint error ${this.code}`;
        this.msg = this.message;
        this.status = typeof status === 'number' ? status : 0;
        this.cause = cause;
        Object.setPrototypeOf(this, WebrpcError.prototype);
    }
    static new(payload) {
        return new this(payload.error, payload.code, payload.message || payload.msg, payload.status, payload.cause);
    }
}
// Webrpc errors
export class WebrpcEndpointError extends WebrpcError {
    constructor(name = 'WebrpcEndpoint', code = 0, message = `endpoint error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcEndpointError.prototype);
    }
}
export class WebrpcRequestFailedError extends WebrpcError {
    constructor(name = 'WebrpcRequestFailed', code = -1, message = `request failed`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype);
    }
}
export class WebrpcBadRouteError extends WebrpcError {
    constructor(name = 'WebrpcBadRoute', code = -2, message = `bad route`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadRouteError.prototype);
    }
}
export class WebrpcBadMethodError extends WebrpcError {
    constructor(name = 'WebrpcBadMethod', code = -3, message = `bad method`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadMethodError.prototype);
    }
}
export class WebrpcBadRequestError extends WebrpcError {
    constructor(name = 'WebrpcBadRequest', code = -4, message = `bad request`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadRequestError.prototype);
    }
}
export class WebrpcBadResponseError extends WebrpcError {
    constructor(name = 'WebrpcBadResponse', code = -5, message = `bad response`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadResponseError.prototype);
    }
}
export class WebrpcServerPanicError extends WebrpcError {
    constructor(name = 'WebrpcServerPanic', code = -6, message = `server panic`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcServerPanicError.prototype);
    }
}
export class WebrpcInternalErrorError extends WebrpcError {
    constructor(name = 'WebrpcInternalError', code = -7, message = `internal error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcInternalErrorError.prototype);
    }
}
export class WebrpcClientDisconnectedError extends WebrpcError {
    constructor(name = 'WebrpcClientDisconnected', code = -8, message = `client disconnected`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcClientDisconnectedError.prototype);
    }
}
export class WebrpcStreamLostError extends WebrpcError {
    constructor(name = 'WebrpcStreamLost', code = -9, message = `stream lost`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcStreamLostError.prototype);
    }
}
export class WebrpcStreamFinishedError extends WebrpcError {
    constructor(name = 'WebrpcStreamFinished', code = -10, message = `stream finished`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcStreamFinishedError.prototype);
    }
}
// Schema errors
export class UnauthorizedError extends WebrpcError {
    constructor(name = 'Unauthorized', code = 1000, message = `Unauthorized access`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, UnauthorizedError.prototype);
    }
}
export class PermissionDeniedError extends WebrpcError {
    constructor(name = 'PermissionDenied', code = 1001, message = `Permission denied`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, PermissionDeniedError.prototype);
    }
}
export class SessionExpiredError extends WebrpcError {
    constructor(name = 'SessionExpired', code = 1002, message = `Session expired`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, SessionExpiredError.prototype);
    }
}
export class MethodNotFoundError extends WebrpcError {
    constructor(name = 'MethodNotFound', code = 1003, message = `Method not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, MethodNotFoundError.prototype);
    }
}
export class RequestConflictError extends WebrpcError {
    constructor(name = 'RequestConflict', code = 1004, message = `Conflict with target resource`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, RequestConflictError.prototype);
    }
}
export class AbortedError extends WebrpcError {
    constructor(name = 'Aborted', code = 1005, message = `Request aborted`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, AbortedError.prototype);
    }
}
export class GeoblockedError extends WebrpcError {
    constructor(name = 'Geoblocked', code = 1006, message = `Geoblocked region`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, GeoblockedError.prototype);
    }
}
export class RateLimitedError extends WebrpcError {
    constructor(name = 'RateLimited', code = 1007, message = `Rate-limited. Please slow down.`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, RateLimitedError.prototype);
    }
}
export class InvalidArgumentError extends WebrpcError {
    constructor(name = 'InvalidArgument', code = 2001, message = `Invalid argument`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, InvalidArgumentError.prototype);
    }
}
export class UnavailableError extends WebrpcError {
    constructor(name = 'Unavailable', code = 2002, message = `Unavailable resource`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, UnavailableError.prototype);
    }
}
export class QueryFailedError extends WebrpcError {
    constructor(name = 'QueryFailed', code = 2003, message = `Query failed`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, QueryFailedError.prototype);
    }
}
export class ValidationFailedError extends WebrpcError {
    constructor(name = 'ValidationFailed', code = 2004, message = `Validation Failed`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, ValidationFailedError.prototype);
    }
}
export class NotFoundError extends WebrpcError {
    constructor(name = 'NotFound', code = 3000, message = `Resource not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, NotFoundError.prototype);
    }
}
export class RequiresTOTPError extends WebrpcError {
    constructor(name = 'RequiresTOTP', code = 6600, message = `TOTP is required`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, RequiresTOTPError.prototype);
    }
}
export class RequiresPINError extends WebrpcError {
    constructor(name = 'RequiresPIN', code = 6601, message = `PIN is required`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, RequiresPINError.prototype);
    }
}
export var errors;
(function (errors) {
    errors["WebrpcEndpoint"] = "WebrpcEndpoint";
    errors["WebrpcRequestFailed"] = "WebrpcRequestFailed";
    errors["WebrpcBadRoute"] = "WebrpcBadRoute";
    errors["WebrpcBadMethod"] = "WebrpcBadMethod";
    errors["WebrpcBadRequest"] = "WebrpcBadRequest";
    errors["WebrpcBadResponse"] = "WebrpcBadResponse";
    errors["WebrpcServerPanic"] = "WebrpcServerPanic";
    errors["WebrpcInternalError"] = "WebrpcInternalError";
    errors["WebrpcClientDisconnected"] = "WebrpcClientDisconnected";
    errors["WebrpcStreamLost"] = "WebrpcStreamLost";
    errors["WebrpcStreamFinished"] = "WebrpcStreamFinished";
    errors["Unauthorized"] = "Unauthorized";
    errors["PermissionDenied"] = "PermissionDenied";
    errors["SessionExpired"] = "SessionExpired";
    errors["MethodNotFound"] = "MethodNotFound";
    errors["RequestConflict"] = "RequestConflict";
    errors["Aborted"] = "Aborted";
    errors["Geoblocked"] = "Geoblocked";
    errors["RateLimited"] = "RateLimited";
    errors["InvalidArgument"] = "InvalidArgument";
    errors["Unavailable"] = "Unavailable";
    errors["QueryFailed"] = "QueryFailed";
    errors["ValidationFailed"] = "ValidationFailed";
    errors["NotFound"] = "NotFound";
    errors["RequiresTOTP"] = "RequiresTOTP";
    errors["RequiresPIN"] = "RequiresPIN";
})(errors || (errors = {}));
export var WebrpcErrorCodes;
(function (WebrpcErrorCodes) {
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcEndpoint"] = 0] = "WebrpcEndpoint";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcRequestFailed"] = -1] = "WebrpcRequestFailed";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadRoute"] = -2] = "WebrpcBadRoute";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadMethod"] = -3] = "WebrpcBadMethod";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadRequest"] = -4] = "WebrpcBadRequest";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadResponse"] = -5] = "WebrpcBadResponse";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcServerPanic"] = -6] = "WebrpcServerPanic";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcInternalError"] = -7] = "WebrpcInternalError";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcClientDisconnected"] = -8] = "WebrpcClientDisconnected";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcStreamLost"] = -9] = "WebrpcStreamLost";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcStreamFinished"] = -10] = "WebrpcStreamFinished";
    WebrpcErrorCodes[WebrpcErrorCodes["Unauthorized"] = 1000] = "Unauthorized";
    WebrpcErrorCodes[WebrpcErrorCodes["PermissionDenied"] = 1001] = "PermissionDenied";
    WebrpcErrorCodes[WebrpcErrorCodes["SessionExpired"] = 1002] = "SessionExpired";
    WebrpcErrorCodes[WebrpcErrorCodes["MethodNotFound"] = 1003] = "MethodNotFound";
    WebrpcErrorCodes[WebrpcErrorCodes["RequestConflict"] = 1004] = "RequestConflict";
    WebrpcErrorCodes[WebrpcErrorCodes["Aborted"] = 1005] = "Aborted";
    WebrpcErrorCodes[WebrpcErrorCodes["Geoblocked"] = 1006] = "Geoblocked";
    WebrpcErrorCodes[WebrpcErrorCodes["RateLimited"] = 1007] = "RateLimited";
    WebrpcErrorCodes[WebrpcErrorCodes["InvalidArgument"] = 2001] = "InvalidArgument";
    WebrpcErrorCodes[WebrpcErrorCodes["Unavailable"] = 2002] = "Unavailable";
    WebrpcErrorCodes[WebrpcErrorCodes["QueryFailed"] = 2003] = "QueryFailed";
    WebrpcErrorCodes[WebrpcErrorCodes["ValidationFailed"] = 2004] = "ValidationFailed";
    WebrpcErrorCodes[WebrpcErrorCodes["NotFound"] = 3000] = "NotFound";
    WebrpcErrorCodes[WebrpcErrorCodes["RequiresTOTP"] = 6600] = "RequiresTOTP";
    WebrpcErrorCodes[WebrpcErrorCodes["RequiresPIN"] = 6601] = "RequiresPIN";
})(WebrpcErrorCodes || (WebrpcErrorCodes = {}));
export const webrpcErrorByCode = {
    [0]: WebrpcEndpointError,
    [-1]: WebrpcRequestFailedError,
    [-2]: WebrpcBadRouteError,
    [-3]: WebrpcBadMethodError,
    [-4]: WebrpcBadRequestError,
    [-5]: WebrpcBadResponseError,
    [-6]: WebrpcServerPanicError,
    [-7]: WebrpcInternalErrorError,
    [-8]: WebrpcClientDisconnectedError,
    [-9]: WebrpcStreamLostError,
    [-10]: WebrpcStreamFinishedError,
    [1000]: UnauthorizedError,
    [1001]: PermissionDeniedError,
    [1002]: SessionExpiredError,
    [1003]: MethodNotFoundError,
    [1004]: RequestConflictError,
    [1005]: AbortedError,
    [1006]: GeoblockedError,
    [1007]: RateLimitedError,
    [2001]: InvalidArgumentError,
    [2002]: UnavailableError,
    [2003]: QueryFailedError,
    [2004]: ValidationFailedError,
    [3000]: NotFoundError,
    [6600]: RequiresTOTPError,
    [6601]: RequiresPINError,
};
