/* eslint-disable */
// sessions v0.0.1 7f7ab1f70cc9f789cfe5317c9378f0c66895f141
// --
// Code generated by webrpc-gen@v0.22.1 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=sessions.ridl -target=typescript -client -out=./clients/sessions.gen.ts
export const WebrpcHeader = 'Webrpc';
export const WebrpcHeaderValue = 'webrpc@v0.22.1;gen-typescript@v0.16.2;sessions@v0.0.1';
// WebRPC description and code-gen version
export const WebRPCVersion = 'v1';
// Schema version of your RIDL schema
export const WebRPCSchemaVersion = 'v0.0.1';
// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = '7f7ab1f70cc9f789cfe5317c9378f0c66895f141';
export function VersionFromHeader(headers) {
    const headerValue = headers.get(WebrpcHeader);
    if (!headerValue) {
        return {
            webrpcGenVersion: '',
            codeGenName: '',
            codeGenVersion: '',
            schemaName: '',
            schemaVersion: '',
        };
    }
    return parseWebrpcGenVersions(headerValue);
}
function parseWebrpcGenVersions(header) {
    const versions = header.split(';');
    if (versions.length < 3) {
        return {
            webrpcGenVersion: '',
            codeGenName: '',
            codeGenVersion: '',
            schemaName: '',
            schemaVersion: '',
        };
    }
    const [_, webrpcGenVersion] = versions[0].split('@');
    const [codeGenName, codeGenVersion] = versions[1].split('@');
    const [schemaName, schemaVersion] = versions[2].split('@');
    return {
        webrpcGenVersion: webrpcGenVersion ?? '',
        codeGenName: codeGenName ?? '',
        codeGenVersion: codeGenVersion ?? '',
        schemaName: schemaName ?? '',
        schemaVersion: schemaVersion ?? '',
    };
}
//
// Types
//
export var PayloadType;
(function (PayloadType) {
    PayloadType["Transactions"] = "Transactions";
    PayloadType["Message"] = "Message";
    PayloadType["ConfigUpdate"] = "ConfigUpdate";
    PayloadType["Digest"] = "Digest";
})(PayloadType || (PayloadType = {}));
export var SignatureType;
(function (SignatureType) {
    SignatureType["EIP712"] = "EIP712";
    SignatureType["EthSign"] = "EthSign";
    SignatureType["EIP1271"] = "EIP1271";
    SignatureType["Sapient"] = "Sapient";
    SignatureType["SapientCompact"] = "SapientCompact";
})(SignatureType || (SignatureType = {}));
//
// Client
//
export class Sessions {
    hostname;
    fetch;
    path = '/rpc/Sessions/';
    constructor(hostname, fetch) {
        this.hostname = hostname.replace(/\/*$/, '');
        this.fetch = (input, init) => fetch(input, init);
    }
    url(name) {
        return this.hostname + this.path + name;
    }
    ping = (headers, signal) => {
        return this.fetch(this.url('Ping'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    config = (args, headers, signal) => {
        return this.fetch(this.url('Config'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    version: _data.version,
                    config: _data.config,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    tree = (args, headers, signal) => {
        return this.fetch(this.url('Tree'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    version: _data.version,
                    tree: _data.tree,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    payload = (args, headers, signal) => {
        return this.fetch(this.url('Payload'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    version: _data.version,
                    payload: _data.payload,
                    wallet: _data.wallet,
                    chainID: _data.chainID,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    wallets = (args, headers, signal) => {
        return this.fetch(this.url('Wallets'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    wallets: _data.wallets,
                    cursor: _data.cursor,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    deployHash = (args, headers, signal) => {
        return this.fetch(this.url('DeployHash'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    deployHash: _data.deployHash,
                    context: _data.context,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    witness = (args, headers, signal) => {
        return this.fetch(this.url('Witness'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    witness: _data.witness,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    configUpdates = (args, headers, signal) => {
        return this.fetch(this.url('ConfigUpdates'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    updates: _data.updates,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    migrations = (args, headers, signal) => {
        return this.fetch(this.url('Migrations'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    migrations: _data.migrations,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    saveConfig = (args, headers, signal) => {
        return this.fetch(this.url('SaveConfig'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    saveTree = (args, headers, signal) => {
        return this.fetch(this.url('SaveTree'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    savePayload = (args, headers, signal) => {
        return this.fetch(this.url('SavePayload'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    saveWallet = (args, headers, signal) => {
        return this.fetch(this.url('SaveWallet'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    saveSignature = (args, headers, signal) => {
        return this.fetch(this.url('SaveSignature'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    saveSignature2 = (args, headers, signal) => {
        return this.fetch(this.url('SaveSignature2'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    saveSignerSignatures = (args, headers, signal) => {
        return this.fetch(this.url('SaveSignerSignatures'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    saveSignerSignatures2 = (args, headers, signal) => {
        return this.fetch(this.url('SaveSignerSignatures2'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    saveSignerSignatures3 = (args, headers, signal) => {
        return this.fetch(this.url('SaveSignerSignatures3'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    saveMigration = (args, headers, signal) => {
        return this.fetch(this.url('SaveMigration'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
}
const createHTTPRequest = (body = {}, headers = {}, signal = null) => {
    const reqHeaders = { ...headers, 'Content-Type': 'application/json' };
    reqHeaders[WebrpcHeader] = WebrpcHeaderValue;
    return {
        method: 'POST',
        headers: reqHeaders,
        body: JSON.stringify(body || {}),
        signal,
    };
};
const buildResponse = (res) => {
    return res.text().then((text) => {
        let data;
        try {
            data = JSON.parse(text);
        }
        catch (error) {
            let message = '';
            if (error instanceof Error) {
                message = error.message;
            }
            throw WebrpcBadResponseError.new({
                status: res.status,
                cause: `JSON.parse(): ${message}: response text: ${text}`,
            });
        }
        if (!res.ok) {
            const code = typeof data.code === 'number' ? data.code : 0;
            throw (webrpcErrorByCode[code] || WebrpcError).new(data);
        }
        return data;
    });
};
//
// Errors
//
export class WebrpcError extends Error {
    name;
    code;
    message;
    status;
    cause;
    /** @deprecated Use message instead of msg. Deprecated in webrpc v0.11.0. */
    msg;
    constructor(name, code, message, status, cause) {
        super(message);
        this.name = name || 'WebrpcError';
        this.code = typeof code === 'number' ? code : 0;
        this.message = message || `endpoint error ${this.code}`;
        this.msg = this.message;
        this.status = typeof status === 'number' ? status : 0;
        this.cause = cause;
        Object.setPrototypeOf(this, WebrpcError.prototype);
    }
    static new(payload) {
        return new this(payload.error, payload.code, payload.message || payload.msg, payload.status, payload.cause);
    }
}
// Webrpc errors
export class WebrpcEndpointError extends WebrpcError {
    constructor(name = 'WebrpcEndpoint', code = 0, message = `endpoint error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcEndpointError.prototype);
    }
}
export class WebrpcRequestFailedError extends WebrpcError {
    constructor(name = 'WebrpcRequestFailed', code = -1, message = `request failed`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype);
    }
}
export class WebrpcBadRouteError extends WebrpcError {
    constructor(name = 'WebrpcBadRoute', code = -2, message = `bad route`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadRouteError.prototype);
    }
}
export class WebrpcBadMethodError extends WebrpcError {
    constructor(name = 'WebrpcBadMethod', code = -3, message = `bad method`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadMethodError.prototype);
    }
}
export class WebrpcBadRequestError extends WebrpcError {
    constructor(name = 'WebrpcBadRequest', code = -4, message = `bad request`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadRequestError.prototype);
    }
}
export class WebrpcBadResponseError extends WebrpcError {
    constructor(name = 'WebrpcBadResponse', code = -5, message = `bad response`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadResponseError.prototype);
    }
}
export class WebrpcServerPanicError extends WebrpcError {
    constructor(name = 'WebrpcServerPanic', code = -6, message = `server panic`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcServerPanicError.prototype);
    }
}
export class WebrpcInternalErrorError extends WebrpcError {
    constructor(name = 'WebrpcInternalError', code = -7, message = `internal error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcInternalErrorError.prototype);
    }
}
export class WebrpcClientDisconnectedError extends WebrpcError {
    constructor(name = 'WebrpcClientDisconnected', code = -8, message = `client disconnected`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcClientDisconnectedError.prototype);
    }
}
export class WebrpcStreamLostError extends WebrpcError {
    constructor(name = 'WebrpcStreamLost', code = -9, message = `stream lost`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcStreamLostError.prototype);
    }
}
export class WebrpcStreamFinishedError extends WebrpcError {
    constructor(name = 'WebrpcStreamFinished', code = -10, message = `stream finished`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcStreamFinishedError.prototype);
    }
}
// Schema errors
export class InvalidArgumentError extends WebrpcError {
    constructor(name = 'InvalidArgument', code = 1, message = `invalid argument`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, InvalidArgumentError.prototype);
    }
}
export class NotFoundError extends WebrpcError {
    constructor(name = 'NotFound', code = 2, message = `not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, NotFoundError.prototype);
    }
}
export var errors;
(function (errors) {
    errors["WebrpcEndpoint"] = "WebrpcEndpoint";
    errors["WebrpcRequestFailed"] = "WebrpcRequestFailed";
    errors["WebrpcBadRoute"] = "WebrpcBadRoute";
    errors["WebrpcBadMethod"] = "WebrpcBadMethod";
    errors["WebrpcBadRequest"] = "WebrpcBadRequest";
    errors["WebrpcBadResponse"] = "WebrpcBadResponse";
    errors["WebrpcServerPanic"] = "WebrpcServerPanic";
    errors["WebrpcInternalError"] = "WebrpcInternalError";
    errors["WebrpcClientDisconnected"] = "WebrpcClientDisconnected";
    errors["WebrpcStreamLost"] = "WebrpcStreamLost";
    errors["WebrpcStreamFinished"] = "WebrpcStreamFinished";
    errors["InvalidArgument"] = "InvalidArgument";
    errors["NotFound"] = "NotFound";
})(errors || (errors = {}));
export var WebrpcErrorCodes;
(function (WebrpcErrorCodes) {
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcEndpoint"] = 0] = "WebrpcEndpoint";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcRequestFailed"] = -1] = "WebrpcRequestFailed";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadRoute"] = -2] = "WebrpcBadRoute";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadMethod"] = -3] = "WebrpcBadMethod";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadRequest"] = -4] = "WebrpcBadRequest";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadResponse"] = -5] = "WebrpcBadResponse";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcServerPanic"] = -6] = "WebrpcServerPanic";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcInternalError"] = -7] = "WebrpcInternalError";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcClientDisconnected"] = -8] = "WebrpcClientDisconnected";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcStreamLost"] = -9] = "WebrpcStreamLost";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcStreamFinished"] = -10] = "WebrpcStreamFinished";
    WebrpcErrorCodes[WebrpcErrorCodes["InvalidArgument"] = 1] = "InvalidArgument";
    WebrpcErrorCodes[WebrpcErrorCodes["NotFound"] = 2] = "NotFound";
})(WebrpcErrorCodes || (WebrpcErrorCodes = {}));
export const webrpcErrorByCode = {
    [0]: WebrpcEndpointError,
    [-1]: WebrpcRequestFailedError,
    [-2]: WebrpcBadRouteError,
    [-3]: WebrpcBadMethodError,
    [-4]: WebrpcBadRequestError,
    [-5]: WebrpcBadResponseError,
    [-6]: WebrpcServerPanicError,
    [-7]: WebrpcInternalErrorError,
    [-8]: WebrpcClientDisconnectedError,
    [-9]: WebrpcStreamLostError,
    [-10]: WebrpcStreamFinishedError,
    [1]: InvalidArgumentError,
    [2]: NotFoundError,
};
