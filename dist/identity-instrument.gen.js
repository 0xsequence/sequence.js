/* eslint-disable */
// identity-instrument v0.1.0 b0ca08fbbd2e98d269d745176d4de5cbfa8960d6
// --
// Code generated by webrpc-gen@v0.23.1 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=identity-instrument.ridl -target=typescript -client -out=./clients/identity-instrument.gen.ts
export const WebrpcHeader = 'Webrpc';
export const WebrpcHeaderValue = 'webrpc@v0.23.1;gen-typescript@v0.16.3;identity-instrument@v0.1.0';
// WebRPC description and code-gen version
export const WebRPCVersion = 'v1';
// Schema version of your RIDL schema
export const WebRPCSchemaVersion = 'v0.1.0';
// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = 'b0ca08fbbd2e98d269d745176d4de5cbfa8960d6';
export function VersionFromHeader(headers) {
    const headerValue = headers.get(WebrpcHeader);
    if (!headerValue) {
        return {
            webrpcGenVersion: '',
            codeGenName: '',
            codeGenVersion: '',
            schemaName: '',
            schemaVersion: '',
        };
    }
    return parseWebrpcGenVersions(headerValue);
}
function parseWebrpcGenVersions(header) {
    const versions = header.split(';');
    if (versions.length < 3) {
        return {
            webrpcGenVersion: '',
            codeGenName: '',
            codeGenVersion: '',
            schemaName: '',
            schemaVersion: '',
        };
    }
    const [_, webrpcGenVersion] = versions[0].split('@');
    const [codeGenName, codeGenVersion] = versions[1].split('@');
    const [schemaName, schemaVersion] = versions[2].split('@');
    return {
        webrpcGenVersion: webrpcGenVersion ?? '',
        codeGenName: codeGenName ?? '',
        codeGenVersion: codeGenVersion ?? '',
        schemaName: schemaName ?? '',
        schemaVersion: schemaVersion ?? '',
    };
}
//
// Types
//
export var KeyType;
(function (KeyType) {
    KeyType["WebCrypto_Secp256r1"] = "WebCrypto_Secp256r1";
    KeyType["Ethereum_Secp256k1"] = "Ethereum_Secp256k1";
})(KeyType || (KeyType = {}));
export var IdentityType;
(function (IdentityType) {
    IdentityType["Email"] = "Email";
    IdentityType["OIDC"] = "OIDC";
})(IdentityType || (IdentityType = {}));
export var AuthMode;
(function (AuthMode) {
    AuthMode["OTP"] = "OTP";
    AuthMode["IDToken"] = "IDToken";
    AuthMode["AccessToken"] = "AccessToken";
    AuthMode["AuthCode"] = "AuthCode";
    AuthMode["AuthCodePKCE"] = "AuthCodePKCE";
})(AuthMode || (AuthMode = {}));
//
// Client
//
export class IdentityInstrument {
    hostname;
    fetch;
    path = '/rpc/IdentityInstrument/';
    constructor(hostname, fetch) {
        this.hostname = hostname.replace(/\/*$/, '');
        this.fetch = (input, init) => fetch(input, init);
    }
    url(name) {
        return this.hostname + this.path + name;
    }
    commitVerifier = (args, headers, signal) => {
        return this.fetch(this.url('CommitVerifier'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    verifier: _data.verifier,
                    loginHint: _data.loginHint,
                    challenge: _data.challenge,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    completeAuth = (args, headers, signal) => {
        return this.fetch(this.url('CompleteAuth'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    signer: _data.signer,
                    identity: _data.identity,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sign = (args, headers, signal) => {
        return this.fetch(this.url('Sign'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    signature: _data.signature,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
}
const createHTTPRequest = (body = {}, headers = {}, signal = null) => {
    const reqHeaders = { ...headers, 'Content-Type': 'application/json' };
    reqHeaders[WebrpcHeader] = WebrpcHeaderValue;
    return {
        method: 'POST',
        headers: reqHeaders,
        body: JSON.stringify(body || {}),
        signal,
    };
};
const buildResponse = (res) => {
    return res.text().then((text) => {
        let data;
        try {
            data = JSON.parse(text);
        }
        catch (error) {
            let message = '';
            if (error instanceof Error) {
                message = error.message;
            }
            throw WebrpcBadResponseError.new({
                status: res.status,
                cause: `JSON.parse(): ${message}: response text: ${text}`,
            });
        }
        if (!res.ok) {
            const code = typeof data.code === 'number' ? data.code : 0;
            throw (webrpcErrorByCode[code] || WebrpcError).new(data);
        }
        return data;
    });
};
//
// Errors
//
export class WebrpcError extends Error {
    name;
    code;
    message;
    status;
    cause;
    /** @deprecated Use message instead of msg. Deprecated in webrpc v0.11.0. */
    msg;
    constructor(name, code, message, status, cause) {
        super(message);
        this.name = name || 'WebrpcError';
        this.code = typeof code === 'number' ? code : 0;
        this.message = message || `endpoint error ${this.code}`;
        this.msg = this.message;
        this.status = typeof status === 'number' ? status : 0;
        this.cause = cause;
        Object.setPrototypeOf(this, WebrpcError.prototype);
    }
    static new(payload) {
        return new this(payload.error, payload.code, payload.message || payload.msg, payload.status, payload.cause);
    }
}
// Webrpc errors
export class WebrpcEndpointError extends WebrpcError {
    constructor(name = 'WebrpcEndpoint', code = 0, message = `endpoint error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcEndpointError.prototype);
    }
}
export class WebrpcRequestFailedError extends WebrpcError {
    constructor(name = 'WebrpcRequestFailed', code = -1, message = `request failed`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype);
    }
}
export class WebrpcBadRouteError extends WebrpcError {
    constructor(name = 'WebrpcBadRoute', code = -2, message = `bad route`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadRouteError.prototype);
    }
}
export class WebrpcBadMethodError extends WebrpcError {
    constructor(name = 'WebrpcBadMethod', code = -3, message = `bad method`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadMethodError.prototype);
    }
}
export class WebrpcBadRequestError extends WebrpcError {
    constructor(name = 'WebrpcBadRequest', code = -4, message = `bad request`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadRequestError.prototype);
    }
}
export class WebrpcBadResponseError extends WebrpcError {
    constructor(name = 'WebrpcBadResponse', code = -5, message = `bad response`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadResponseError.prototype);
    }
}
export class WebrpcServerPanicError extends WebrpcError {
    constructor(name = 'WebrpcServerPanic', code = -6, message = `server panic`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcServerPanicError.prototype);
    }
}
export class WebrpcInternalErrorError extends WebrpcError {
    constructor(name = 'WebrpcInternalError', code = -7, message = `internal error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcInternalErrorError.prototype);
    }
}
export class WebrpcClientDisconnectedError extends WebrpcError {
    constructor(name = 'WebrpcClientDisconnected', code = -8, message = `client disconnected`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcClientDisconnectedError.prototype);
    }
}
export class WebrpcStreamLostError extends WebrpcError {
    constructor(name = 'WebrpcStreamLost', code = -9, message = `stream lost`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcStreamLostError.prototype);
    }
}
export class WebrpcStreamFinishedError extends WebrpcError {
    constructor(name = 'WebrpcStreamFinished', code = -10, message = `stream finished`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcStreamFinishedError.prototype);
    }
}
// Schema errors
export class InternalErrorError extends WebrpcError {
    constructor(name = 'InternalError', code = 7100, message = `Internal error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, InternalErrorError.prototype);
    }
}
export class EncryptionErrorError extends WebrpcError {
    constructor(name = 'EncryptionError', code = 7101, message = `Encryption error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, EncryptionErrorError.prototype);
    }
}
export class DatabaseErrorError extends WebrpcError {
    constructor(name = 'DatabaseError', code = 7102, message = `Database error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, DatabaseErrorError.prototype);
    }
}
export class DataIntegrityErrorError extends WebrpcError {
    constructor(name = 'DataIntegrityError', code = 7103, message = `Data integrity error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, DataIntegrityErrorError.prototype);
    }
}
export class IdentityProviderErrorError extends WebrpcError {
    constructor(name = 'IdentityProviderError', code = 7104, message = `Identity provider error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, IdentityProviderErrorError.prototype);
    }
}
export class InvalidRequestError extends WebrpcError {
    constructor(name = 'InvalidRequest', code = 7200, message = `The request was invalid`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, InvalidRequestError.prototype);
    }
}
export class InvalidSignatureError extends WebrpcError {
    constructor(name = 'InvalidSignature', code = 7201, message = `The signature was invalid`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, InvalidSignatureError.prototype);
    }
}
export class KeyNotFoundError extends WebrpcError {
    constructor(name = 'KeyNotFound', code = 7202, message = `The authentication key was not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, KeyNotFoundError.prototype);
    }
}
export class KeyExpiredError extends WebrpcError {
    constructor(name = 'KeyExpired', code = 7203, message = `The authentication key expired`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, KeyExpiredError.prototype);
    }
}
export class SignerNotFoundError extends WebrpcError {
    constructor(name = 'SignerNotFound', code = 7204, message = `The signer was not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, SignerNotFoundError.prototype);
    }
}
export class ProofVerificationFailedError extends WebrpcError {
    constructor(name = 'ProofVerificationFailed', code = 7002, message = `The authentication proof could not be verified`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, ProofVerificationFailedError.prototype);
    }
}
export class AnswerIncorrectError extends WebrpcError {
    constructor(name = 'AnswerIncorrect', code = 7003, message = `The provided answer is incorrect`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, AnswerIncorrectError.prototype);
    }
}
export class ChallengeExpiredError extends WebrpcError {
    constructor(name = 'ChallengeExpired', code = 7004, message = `The challenge has expired`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, ChallengeExpiredError.prototype);
    }
}
export class TooManyAttemptsError extends WebrpcError {
    constructor(name = 'TooManyAttempts', code = 7005, message = `Too many attempts`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, TooManyAttemptsError.prototype);
    }
}
export class OAuthErrorError extends WebrpcError {
    constructor(name = 'OAuthError', code = 7006, message = `Failed to exchange OAuth credentials`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, OAuthErrorError.prototype);
    }
}
export class AccessErrorError extends WebrpcError {
    constructor(name = 'AccessError', code = 7007, message = `Access error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, AccessErrorError.prototype);
    }
}
export var errors;
(function (errors) {
    errors["WebrpcEndpoint"] = "WebrpcEndpoint";
    errors["WebrpcRequestFailed"] = "WebrpcRequestFailed";
    errors["WebrpcBadRoute"] = "WebrpcBadRoute";
    errors["WebrpcBadMethod"] = "WebrpcBadMethod";
    errors["WebrpcBadRequest"] = "WebrpcBadRequest";
    errors["WebrpcBadResponse"] = "WebrpcBadResponse";
    errors["WebrpcServerPanic"] = "WebrpcServerPanic";
    errors["WebrpcInternalError"] = "WebrpcInternalError";
    errors["WebrpcClientDisconnected"] = "WebrpcClientDisconnected";
    errors["WebrpcStreamLost"] = "WebrpcStreamLost";
    errors["WebrpcStreamFinished"] = "WebrpcStreamFinished";
    errors["InternalError"] = "InternalError";
    errors["EncryptionError"] = "EncryptionError";
    errors["DatabaseError"] = "DatabaseError";
    errors["DataIntegrityError"] = "DataIntegrityError";
    errors["IdentityProviderError"] = "IdentityProviderError";
    errors["InvalidRequest"] = "InvalidRequest";
    errors["InvalidSignature"] = "InvalidSignature";
    errors["KeyNotFound"] = "KeyNotFound";
    errors["KeyExpired"] = "KeyExpired";
    errors["SignerNotFound"] = "SignerNotFound";
    errors["ProofVerificationFailed"] = "ProofVerificationFailed";
    errors["AnswerIncorrect"] = "AnswerIncorrect";
    errors["ChallengeExpired"] = "ChallengeExpired";
    errors["TooManyAttempts"] = "TooManyAttempts";
    errors["OAuthError"] = "OAuthError";
    errors["AccessError"] = "AccessError";
})(errors || (errors = {}));
export var WebrpcErrorCodes;
(function (WebrpcErrorCodes) {
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcEndpoint"] = 0] = "WebrpcEndpoint";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcRequestFailed"] = -1] = "WebrpcRequestFailed";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadRoute"] = -2] = "WebrpcBadRoute";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadMethod"] = -3] = "WebrpcBadMethod";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadRequest"] = -4] = "WebrpcBadRequest";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadResponse"] = -5] = "WebrpcBadResponse";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcServerPanic"] = -6] = "WebrpcServerPanic";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcInternalError"] = -7] = "WebrpcInternalError";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcClientDisconnected"] = -8] = "WebrpcClientDisconnected";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcStreamLost"] = -9] = "WebrpcStreamLost";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcStreamFinished"] = -10] = "WebrpcStreamFinished";
    WebrpcErrorCodes[WebrpcErrorCodes["InternalError"] = 7100] = "InternalError";
    WebrpcErrorCodes[WebrpcErrorCodes["EncryptionError"] = 7101] = "EncryptionError";
    WebrpcErrorCodes[WebrpcErrorCodes["DatabaseError"] = 7102] = "DatabaseError";
    WebrpcErrorCodes[WebrpcErrorCodes["DataIntegrityError"] = 7103] = "DataIntegrityError";
    WebrpcErrorCodes[WebrpcErrorCodes["IdentityProviderError"] = 7104] = "IdentityProviderError";
    WebrpcErrorCodes[WebrpcErrorCodes["InvalidRequest"] = 7200] = "InvalidRequest";
    WebrpcErrorCodes[WebrpcErrorCodes["InvalidSignature"] = 7201] = "InvalidSignature";
    WebrpcErrorCodes[WebrpcErrorCodes["KeyNotFound"] = 7202] = "KeyNotFound";
    WebrpcErrorCodes[WebrpcErrorCodes["KeyExpired"] = 7203] = "KeyExpired";
    WebrpcErrorCodes[WebrpcErrorCodes["SignerNotFound"] = 7204] = "SignerNotFound";
    WebrpcErrorCodes[WebrpcErrorCodes["ProofVerificationFailed"] = 7002] = "ProofVerificationFailed";
    WebrpcErrorCodes[WebrpcErrorCodes["AnswerIncorrect"] = 7003] = "AnswerIncorrect";
    WebrpcErrorCodes[WebrpcErrorCodes["ChallengeExpired"] = 7004] = "ChallengeExpired";
    WebrpcErrorCodes[WebrpcErrorCodes["TooManyAttempts"] = 7005] = "TooManyAttempts";
    WebrpcErrorCodes[WebrpcErrorCodes["OAuthError"] = 7006] = "OAuthError";
    WebrpcErrorCodes[WebrpcErrorCodes["AccessError"] = 7007] = "AccessError";
})(WebrpcErrorCodes || (WebrpcErrorCodes = {}));
export const webrpcErrorByCode = {
    [0]: WebrpcEndpointError,
    [-1]: WebrpcRequestFailedError,
    [-2]: WebrpcBadRouteError,
    [-3]: WebrpcBadMethodError,
    [-4]: WebrpcBadRequestError,
    [-5]: WebrpcBadResponseError,
    [-6]: WebrpcServerPanicError,
    [-7]: WebrpcInternalErrorError,
    [-8]: WebrpcClientDisconnectedError,
    [-9]: WebrpcStreamLostError,
    [-10]: WebrpcStreamFinishedError,
    [7100]: InternalErrorError,
    [7101]: EncryptionErrorError,
    [7102]: DatabaseErrorError,
    [7103]: DataIntegrityErrorError,
    [7104]: IdentityProviderErrorError,
    [7200]: InvalidRequestError,
    [7201]: InvalidSignatureError,
    [7202]: KeyNotFoundError,
    [7203]: KeyExpiredError,
    [7204]: SignerNotFoundError,
    [7002]: ProofVerificationFailedError,
    [7003]: AnswerIncorrectError,
    [7004]: ChallengeExpiredError,
    [7005]: TooManyAttemptsError,
    [7006]: OAuthErrorError,
    [7007]: AccessErrorError,
};
