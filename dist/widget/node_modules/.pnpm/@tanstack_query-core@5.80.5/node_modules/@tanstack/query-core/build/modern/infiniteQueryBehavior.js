import { ensureQueryFn as T, addToStart as j, addToEnd as E } from "./utils.js";
function B(t) {
  return {
    onFetch: (e, s) => {
      var f, p, y, h, F;
      const r = e.options, P = (y = (p = (f = e.fetchOptions) == null ? void 0 : f.meta) == null ? void 0 : p.fetchMore) == null ? void 0 : y.direction, c = ((h = e.state.data) == null ? void 0 : h.pages) || [], d = ((F = e.state.data) == null ? void 0 : F.pageParams) || [];
      let o = { pages: [], pageParams: [] }, g = 0;
      const m = async () => {
        let i = !1;
        const u = (a) => {
          Object.defineProperty(a, "signal", {
            enumerable: !0,
            get: () => (e.signal.aborted ? i = !0 : e.signal.addEventListener("abort", () => {
              i = !0;
            }), e.signal)
          });
        }, Q = T(e.options, e.fetchOptions), b = async (a, n, l) => {
          if (i)
            return Promise.reject();
          if (n == null && a.pages.length)
            return Promise.resolve(a);
          const k = (() => {
            const C = {
              client: e.client,
              queryKey: e.queryKey,
              pageParam: n,
              direction: l ? "backward" : "forward",
              meta: e.options.meta
            };
            return u(C), C;
          })(), O = await Q(k), { maxPages: v } = e.options, w = l ? j : E;
          return {
            pages: w(a.pages, O, v),
            pageParams: w(a.pageParams, n, v)
          };
        };
        if (P && c.length) {
          const a = P === "backward", n = a ? N : K, l = {
            pages: c,
            pageParams: d
          }, q = n(r, l);
          o = await b(l, q, a);
        } else {
          const a = t ?? c.length;
          do {
            const n = g === 0 ? d[0] ?? r.initialPageParam : K(r, o);
            if (g > 0 && n == null)
              break;
            o = await b(o, n), g++;
          } while (g < a);
        }
        return o;
      };
      e.options.persister ? e.fetchFn = () => {
        var i, u;
        return (u = (i = e.options).persister) == null ? void 0 : u.call(
          i,
          m,
          {
            client: e.client,
            queryKey: e.queryKey,
            meta: e.options.meta,
            signal: e.signal
          },
          s
        );
      } : e.fetchFn = m;
    }
  };
}
function K(t, { pages: e, pageParams: s }) {
  const r = e.length - 1;
  return e.length > 0 ? t.getNextPageParam(
    e[r],
    e,
    s[r],
    s
  ) : void 0;
}
function N(t, { pages: e, pageParams: s }) {
  var r;
  return e.length > 0 ? (r = t.getPreviousPageParam) == null ? void 0 : r.call(t, e[0], e, s[0], s) : void 0;
}
export {
  B as infiniteQueryBehavior
};
