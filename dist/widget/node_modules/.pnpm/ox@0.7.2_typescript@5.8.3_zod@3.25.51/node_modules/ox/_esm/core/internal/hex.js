import { size as i, SizeOverflowError as s, SizeExceedsPaddingSizeError as p, SliceOffsetOutOfBoundsError as f } from "../Hex.js";
function c(t, e) {
  if (i(t) > e)
    throw new s({
      givenSize: i(t),
      maxSize: e
    });
}
function S(t, e) {
  if (typeof e == "number" && e > 0 && e > i(t) - 1)
    throw new f({
      offset: e,
      position: "start",
      size: i(t)
    });
}
function d(t, e, r) {
  if (typeof e == "number" && typeof r == "number" && i(t) !== r - e)
    throw new f({
      offset: r,
      position: "end",
      size: i(t)
    });
}
function u(t, e = {}) {
  const { dir: r, size: n = 32 } = e;
  if (n === 0)
    return t;
  const o = t.replace("0x", "");
  if (o.length > n * 2)
    throw new p({
      size: Math.ceil(o.length / 2),
      targetSize: n,
      type: "Hex"
    });
  return `0x${o[r === "right" ? "padEnd" : "padStart"](n * 2, "0")}`;
}
export {
  d as assertEndOffset,
  c as assertSize,
  S as assertStartOffset,
  u as pad
};
