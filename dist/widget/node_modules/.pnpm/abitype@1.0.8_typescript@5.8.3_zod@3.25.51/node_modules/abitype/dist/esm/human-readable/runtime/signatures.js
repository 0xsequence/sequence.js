import { execTyped as t } from "../../regex.js";
const n = /^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
function s(e) {
  return n.test(e);
}
function g(e) {
  return t(n, e);
}
const r = /^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
function l(e) {
  return r.test(e);
}
function f(e) {
  return t(r, e);
}
const a = /^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\s?\((?<returns>.*?)\))?$/;
function S(e) {
  return a.test(e);
}
function x(e) {
  return t(a, e);
}
const i = /^constructor\((?<parameters>.*?)\)(?:\s(?<stateMutability>payable{1}))?$/;
function p(e) {
  return i.test(e);
}
function b(e) {
  return t(i, e);
}
const u = /^fallback\(\) external(?:\s(?<stateMutability>payable{1}))?$/;
function $(e) {
  return u.test(e);
}
function m(e) {
  return t(u, e);
}
const c = /^receive\(\) external payable$/;
function y(e) {
  return c.test(e);
}
const v = /* @__PURE__ */ new Set(["indexed"]), R = /* @__PURE__ */ new Set([
  "calldata",
  "memory",
  "storage"
]);
export {
  v as eventModifiers,
  b as execConstructorSignature,
  g as execErrorSignature,
  f as execEventSignature,
  m as execFallbackSignature,
  x as execFunctionSignature,
  R as functionModifiers,
  p as isConstructorSignature,
  s as isErrorSignature,
  l as isEventSignature,
  $ as isFallbackSignature,
  S as isFunctionSignature,
  y as isReceiveSignature
};
