import { BaseError as a } from "../../errors.js";
class n extends a {
  constructor({ param: e }) {
    super("Invalid ABI parameter.", {
      details: e
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "InvalidParameterError"
    });
  }
}
class s extends a {
  constructor({ param: e, name: r }) {
    super("Invalid ABI parameter.", {
      details: e,
      metaMessages: [
        `"${r}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`
      ]
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "SolidityProtectedKeywordError"
    });
  }
}
class l extends a {
  constructor({ param: e, type: r, modifier: t }) {
    super("Invalid ABI parameter.", {
      details: e,
      metaMessages: [
        `Modifier "${t}" not allowed${r ? ` in "${r}" type` : ""}.`
      ]
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "InvalidModifierError"
    });
  }
}
class d extends a {
  constructor({ param: e, type: r, modifier: t }) {
    super("Invalid ABI parameter.", {
      details: e,
      metaMessages: [
        `Modifier "${t}" not allowed${r ? ` in "${r}" type` : ""}.`,
        `Data location can only be specified for array, struct, or mapping types, but "${t}" was given.`
      ]
    }), Object.defineProperty(this, "name", {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: "InvalidFunctionModifierError"
    });
  }
}
export {
  d as InvalidFunctionModifierError,
  l as InvalidModifierError,
  n as InvalidParameterError,
  s as SolidityProtectedKeywordError
};
