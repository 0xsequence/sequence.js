import { versionedHashVersionKzg as c } from "../../constants/kzg.js";
import { maxUint256 as m } from "../../constants/number.js";
import { InvalidAddressError as s } from "../../errors/address.js";
import { BaseError as h } from "../../errors/base.js";
import { EmptyBlobError as P, InvalidVersionedHashSizeError as p, InvalidVersionedHashVersionError as x } from "../../errors/blob.js";
import { InvalidChainIdError as n } from "../../errors/chain.js";
import { FeeCapTooHighError as w, TipAboveFeeCapError as E } from "../../errors/node.js";
import { isAddress as f } from "../address/isAddress.js";
import { size as F } from "../data/size.js";
import { slice as I } from "../data/slice.js";
import { hexToNumber as G } from "../encoding/fromHex.js";
function C(t) {
  const { authorizationList: e } = t;
  if (e)
    for (const o of e) {
      const { chainId: r } = o, i = o.address;
      if (!f(i))
        throw new s({ address: i });
      if (r < 0)
        throw new n({ chainId: r });
    }
  d(t);
}
function L(t) {
  const { blobVersionedHashes: e } = t;
  if (e) {
    if (e.length === 0)
      throw new P();
    for (const o of e) {
      const r = F(o), i = G(I(o, 0, 1));
      if (r !== 32)
        throw new p({ hash: o, size: r });
      if (i !== c)
        throw new x({
          hash: o,
          version: i
        });
    }
  }
  d(t);
}
function d(t) {
  const { chainId: e, maxPriorityFeePerGas: o, maxFeePerGas: r, to: i } = t;
  if (e <= 0)
    throw new n({ chainId: e });
  if (i && !f(i))
    throw new s({ address: i });
  if (r && r > m)
    throw new w({ maxFeePerGas: r });
  if (o && r && o > r)
    throw new E({ maxFeePerGas: r, maxPriorityFeePerGas: o });
}
function B(t) {
  const { chainId: e, maxPriorityFeePerGas: o, gasPrice: r, maxFeePerGas: i, to: a } = t;
  if (e <= 0)
    throw new n({ chainId: e });
  if (a && !f(a))
    throw new s({ address: a });
  if (o || i)
    throw new h("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.");
  if (r && r > m)
    throw new w({ maxFeePerGas: r });
}
function K(t) {
  const { chainId: e, maxPriorityFeePerGas: o, gasPrice: r, maxFeePerGas: i, to: a } = t;
  if (a && !f(a))
    throw new s({ address: a });
  if (typeof e < "u" && e <= 0)
    throw new n({ chainId: e });
  if (o || i)
    throw new h("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.");
  if (r && r > m)
    throw new w({ maxFeePerGas: r });
}
export {
  d as assertTransactionEIP1559,
  B as assertTransactionEIP2930,
  L as assertTransactionEIP4844,
  C as assertTransactionEIP7702,
  K as assertTransactionLegacy
};
