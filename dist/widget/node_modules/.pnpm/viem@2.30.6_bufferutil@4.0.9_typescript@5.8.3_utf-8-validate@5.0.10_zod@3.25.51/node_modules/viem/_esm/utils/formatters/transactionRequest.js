import { bytesToHex as d, numberToHex as f } from "../encoding/toHex.js";
import { defineFormatter as o } from "./formatter.js";
const a = {
  legacy: "0x0",
  eip2930: "0x1",
  eip1559: "0x2",
  eip4844: "0x3",
  eip7702: "0x4"
};
function y(e) {
  const n = {};
  return typeof e.authorizationList < "u" && (n.authorizationList = p(e.authorizationList)), typeof e.accessList < "u" && (n.accessList = e.accessList), typeof e.blobVersionedHashes < "u" && (n.blobVersionedHashes = e.blobVersionedHashes), typeof e.blobs < "u" && (typeof e.blobs[0] != "string" ? n.blobs = e.blobs.map((i) => d(i)) : n.blobs = e.blobs), typeof e.data < "u" && (n.data = e.data), typeof e.from < "u" && (n.from = e.from), typeof e.gas < "u" && (n.gas = f(e.gas)), typeof e.gasPrice < "u" && (n.gasPrice = f(e.gasPrice)), typeof e.maxFeePerBlobGas < "u" && (n.maxFeePerBlobGas = f(e.maxFeePerBlobGas)), typeof e.maxFeePerGas < "u" && (n.maxFeePerGas = f(e.maxFeePerGas)), typeof e.maxPriorityFeePerGas < "u" && (n.maxPriorityFeePerGas = f(e.maxPriorityFeePerGas)), typeof e.nonce < "u" && (n.nonce = f(e.nonce)), typeof e.to < "u" && (n.to = e.to), typeof e.type < "u" && (n.type = a[e.type]), typeof e.value < "u" && (n.value = f(e.value)), n;
}
const b = /* @__PURE__ */ o("transactionRequest", y);
function p(e) {
  return e.map((n) => ({
    address: n.address,
    r: n.r ? f(BigInt(n.r)) : n.r,
    s: n.s ? f(BigInt(n.s)) : n.s,
    chainId: f(n.chainId),
    nonce: f(n.nonce),
    ...typeof n.yParity < "u" ? { yParity: f(n.yParity) } : {},
    ...typeof n.v < "u" && typeof n.yParity > "u" ? { v: f(n.v) } : {}
  }));
}
export {
  b as defineTransactionRequest,
  y as formatTransactionRequest,
  a as rpcTransactionType
};
