import { concatHex as z } from "../utils/data/concat.js";
import { toHex as r } from "../utils/encoding/toHex.js";
import { toRlp as d } from "../utils/encoding/toRlp.js";
import { serializeTransaction as g } from "../utils/transaction/serializeTransaction.js";
import { gasPerPubdataDefault as y } from "./constants/number.js";
import { assertEip712Transaction as I } from "./utils/assertEip712Transaction.js";
import { isEIP712Transaction as E } from "./utils/isEip712Transaction.js";
function b(a, t) {
  return E(a) ? D(a) : g(a, t);
}
const $ = {
  transaction: b
};
function D(a) {
  const { chainId: t, gas: e, nonce: o, to: p, from: f, value: i, maxFeePerGas: s, maxPriorityFeePerGas: n, customSignature: u, factoryDeps: l, paymaster: m, paymasterInput: c, gasPerPubdata: x, data: P } = a;
  I(a);
  const T = [
    o ? r(o) : "0x",
    n ? r(n) : "0x",
    s ? r(s) : "0x",
    e ? r(e) : "0x",
    p ?? "0x",
    i ? r(i) : "0x",
    P ?? "0x",
    r(t),
    r(""),
    r(""),
    r(t),
    f ?? "0x",
    x ? r(x) : r(y),
    l ?? [],
    u ?? "0x",
    // EIP712 signature
    m && c ? [m, c] : []
  ];
  return z([
    "0x71",
    d(T)
  ]);
}
export {
  b as serializeTransaction,
  $ as serializers
};
