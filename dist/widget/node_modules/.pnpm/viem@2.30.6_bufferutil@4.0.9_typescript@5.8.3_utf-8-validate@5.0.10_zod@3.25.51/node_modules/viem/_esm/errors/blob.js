import { versionedHashVersionKzg as a } from "../constants/kzg.js";
import { BaseError as s } from "./base.js";
class t extends s {
  constructor({ maxSize: e, size: r }) {
    super("Blob size is too large.", {
      metaMessages: [`Max: ${e} bytes`, `Given: ${r} bytes`],
      name: "BlobSizeTooLargeError"
    });
  }
}
class d extends s {
  constructor() {
    super("Blob data must not be empty.", { name: "EmptyBlobError" });
  }
}
class l extends s {
  constructor({ hash: e, size: r }) {
    super(`Versioned hash "${e}" size is invalid.`, {
      metaMessages: ["Expected: 32", `Received: ${r}`],
      name: "InvalidVersionedHashSizeError"
    });
  }
}
class c extends s {
  constructor({ hash: e, version: r }) {
    super(`Versioned hash "${e}" version is invalid.`, {
      metaMessages: [
        `Expected: ${a}`,
        `Received: ${r}`
      ],
      name: "InvalidVersionedHashVersionError"
    });
  }
}
export {
  t as BlobSizeTooLargeError,
  d as EmptyBlobError,
  l as InvalidVersionedHashSizeError,
  c as InvalidVersionedHashVersionError
};
