import { maxUint256 as C } from "../constants/number.js";
import { InvalidAddressError as l } from "../errors/address.js";
import { BaseError as f } from "../errors/base.js";
import { InvalidChainIdError as h } from "../errors/chain.js";
import { FeeCapTooHighError as I, TipAboveFeeCapError as T } from "../errors/node.js";
import { serializeTransaction as y } from "../op-stack/serializers.js";
import { isAddress as d } from "../utils/address/isAddress.js";
import { concatHex as E } from "../utils/data/concat.js";
import { toHex as t } from "../utils/encoding/toHex.js";
import { toRlp as A } from "../utils/encoding/toRlp.js";
import { serializeAccessList as z } from "../utils/transaction/serializeAccessList.js";
import { toYParitySignatureArray as F } from "../utils/transaction/serializeTransaction.js";
import { isCIP64 as v, isPresent as m, isEmpty as b } from "./utils.js";
function G(r, o) {
  return v(r) ? g(r, o) : y(r, o);
}
const J = {
  transaction: G
};
function g(r, o) {
  H(r);
  const { chainId: a, gas: n, nonce: e, to: s, value: i, maxFeePerGas: c, maxPriorityFeePerGas: p, accessList: P, feeCurrency: x, data: w } = r, u = [
    t(a),
    e ? t(e) : "0x",
    p ? t(p) : "0x",
    c ? t(c) : "0x",
    n ? t(n) : "0x",
    s ?? "0x",
    i ? t(i) : "0x",
    w ?? "0x",
    z(P),
    x,
    ...F(r, o)
  ];
  return E([
    "0x7b",
    A(u)
  ]);
}
const _ = C;
function H(r) {
  const { chainId: o, maxPriorityFeePerGas: a, gasPrice: n, maxFeePerGas: e, to: s, feeCurrency: i } = r;
  if (o <= 0)
    throw new h({ chainId: o });
  if (s && !d(s))
    throw new l({ address: s });
  if (n)
    throw new f("`gasPrice` is not a valid CIP-64 Transaction attribute.");
  if (m(e) && e > _)
    throw new I({ maxFeePerGas: e });
  if (m(a) && m(e) && a > e)
    throw new T({ maxFeePerGas: e, maxPriorityFeePerGas: a });
  if (m(i) && !d(i))
    throw new f("`feeCurrency` MUST be a token address for CIP-64 transactions.");
  if (b(i))
    throw new f("`feeCurrency` must be provided for CIP-64 transactions.");
}
export {
  H as assertTransactionCIP64,
  G as serializeTransaction,
  J as serializers
};
