import { SizeOverflowError as u } from "../../errors/encoding.js";
import { size as t } from "../data/size.js";
function s(n, { size: i }) {
  if (t(n) > i)
    throw new u({
      givenSize: t(n),
      maxSize: i
    });
}
function z(n, i = {}) {
  const { signed: o } = i;
  i.size && s(n, { size: i.size });
  const e = BigInt(n);
  if (!o)
    return e;
  const r = (n.length - 2) / 2, f = (1n << BigInt(r) * 8n - 1n) - 1n;
  return e <= f ? e : e - BigInt(`0x${"f".padStart(r * 2, "f")}`) - 1n;
}
function g(n, i = {}) {
  return Number(z(n, i));
}
export {
  s as assertSize,
  z as hexToBigInt,
  g as hexToNumber
};
