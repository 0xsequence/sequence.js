import { formatGwei as a } from "../utils/unit/formatGwei.js";
import { BaseError as t } from "./base.js";
class i extends t {
  constructor({ cause: r, message: e } = {}) {
    var s;
    const n = (s = e == null ? void 0 : e.replace("execution reverted: ", "")) == null ? void 0 : s.replace("execution reverted", "");
    super(`Execution reverted ${n ? `with reason: ${n}` : "for an unknown reason"}.`, {
      cause: r,
      name: "ExecutionRevertedError"
    });
  }
}
Object.defineProperty(i, "code", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: 3
});
Object.defineProperty(i, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /execution reverted/
});
class c extends t {
  constructor({ cause: r, maxFeePerGas: e } = {}) {
    super(`The fee cap (\`maxFeePerGas\`${e ? ` = ${a(e)} gwei` : ""}) cannot be higher than the maximum allowed value (2^256-1).`, {
      cause: r,
      name: "FeeCapTooHighError"
    });
  }
}
Object.defineProperty(c, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/
});
class u extends t {
  constructor({ cause: r, maxFeePerGas: e } = {}) {
    super(`The fee cap (\`maxFeePerGas\`${e ? ` = ${a(e)}` : ""} gwei) cannot be lower than the block base fee.`, {
      cause: r,
      name: "FeeCapTooLowError"
    });
  }
}
Object.defineProperty(u, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/
});
class l extends t {
  constructor({ cause: r, nonce: e } = {}) {
    super(`Nonce provided for the transaction ${e ? `(${e}) ` : ""}is higher than the next one expected.`, { cause: r, name: "NonceTooHighError" });
  }
}
Object.defineProperty(l, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /nonce too high/
});
class d extends t {
  constructor({ cause: r, nonce: e } = {}) {
    super([
      `Nonce provided for the transaction ${e ? `(${e}) ` : ""}is lower than the current nonce of the account.`,
      "Try increasing the nonce or find the latest nonce with `getTransactionCount`."
    ].join(`
`), { cause: r, name: "NonceTooLowError" });
  }
}
Object.defineProperty(d, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /nonce too low|transaction already imported|already known/
});
class h extends t {
  constructor({ cause: r, nonce: e } = {}) {
    super(`Nonce provided for the transaction ${e ? `(${e}) ` : ""}exceeds the maximum allowed nonce.`, { cause: r, name: "NonceMaxValueError" });
  }
}
Object.defineProperty(h, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /nonce has max value/
});
class f extends t {
  constructor({ cause: r } = {}) {
    super([
      "The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account."
    ].join(`
`), {
      cause: r,
      metaMessages: [
        "This error could arise when the account does not have enough funds to:",
        " - pay for the total gas fee,",
        " - pay for the value to send.",
        " ",
        "The cost of the transaction is calculated as `gas * gas fee + value`, where:",
        " - `gas` is the amount of gas needed for transaction to execute,",
        " - `gas fee` is the gas fee,",
        " - `value` is the amount of ether to send to the recipient."
      ],
      name: "InsufficientFundsError"
    });
  }
}
Object.defineProperty(f, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /insufficient funds|exceeds transaction sender account balance/
});
class p extends t {
  constructor({ cause: r, gas: e } = {}) {
    super(`The amount of gas ${e ? `(${e}) ` : ""}provided for the transaction exceeds the limit allowed for the block.`, {
      cause: r,
      name: "IntrinsicGasTooHighError"
    });
  }
}
Object.defineProperty(p, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /intrinsic gas too high|gas limit reached/
});
class b extends t {
  constructor({ cause: r, gas: e } = {}) {
    super(`The amount of gas ${e ? `(${e}) ` : ""}provided for the transaction is too low.`, {
      cause: r,
      name: "IntrinsicGasTooLowError"
    });
  }
}
Object.defineProperty(b, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /intrinsic gas too low/
});
class g extends t {
  constructor({ cause: r }) {
    super("The transaction type is not supported for this chain.", {
      cause: r,
      name: "TransactionTypeNotSupportedError"
    });
  }
}
Object.defineProperty(g, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /transaction type not valid/
});
class m extends t {
  constructor({ cause: r, maxPriorityFeePerGas: e, maxFeePerGas: n } = {}) {
    super([
      `The provided tip (\`maxPriorityFeePerGas\`${e ? ` = ${a(e)} gwei` : ""}) cannot be higher than the fee cap (\`maxFeePerGas\`${n ? ` = ${a(n)} gwei` : ""}).`
    ].join(`
`), {
      cause: r,
      name: "TipAboveFeeCapError"
    });
  }
}
Object.defineProperty(m, "nodeMessage", {
  enumerable: !0,
  configurable: !0,
  writable: !0,
  value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/
});
class v extends t {
  constructor({ cause: r }) {
    super(`An error occurred while executing: ${r == null ? void 0 : r.shortMessage}`, {
      cause: r,
      name: "UnknownNodeError"
    });
  }
}
export {
  i as ExecutionRevertedError,
  c as FeeCapTooHighError,
  u as FeeCapTooLowError,
  f as InsufficientFundsError,
  p as IntrinsicGasTooHighError,
  b as IntrinsicGasTooLowError,
  h as NonceMaxValueError,
  l as NonceTooHighError,
  d as NonceTooLowError,
  m as TipAboveFeeCapError,
  g as TransactionTypeNotSupportedError,
  v as UnknownNodeError
};
