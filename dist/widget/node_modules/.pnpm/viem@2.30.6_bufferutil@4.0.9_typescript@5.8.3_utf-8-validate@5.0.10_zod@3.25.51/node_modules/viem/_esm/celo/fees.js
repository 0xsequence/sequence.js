const c = {
  /*
     * Estimates the fees per gas for a transaction.
  
     * If the transaction is to be paid in a token (feeCurrency is present) then the fees
     * are estimated in the value of the token. Otherwise falls back to the default
     * estimation by returning null.
     *
     * @param params fee estimation function parameters
     */
  estimateFeesPerGas: async (e) => {
    var n;
    if (!((n = e.request) != null && n.feeCurrency))
      return null;
    const [t, r] = await Promise.all([
      s(e.client, e.request.feeCurrency),
      i(e.client, e.request.feeCurrency)
    ]);
    return {
      maxFeePerGas: e.multiply(t - r) + r,
      maxPriorityFeePerGas: r
    };
  }
};
async function s(e, t) {
  const r = await e.request({
    method: "eth_gasPrice",
    params: [t]
  });
  return BigInt(r);
}
async function i(e, t) {
  const r = await e.request({
    method: "eth_maxPriorityFeePerGas",
    params: [t]
  });
  return BigInt(r);
}
export {
  c as fees
};
