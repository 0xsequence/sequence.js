import { hexToBytes as b } from "../encoding/toBytes.js";
import { bytesToHex as y } from "../encoding/toHex.js";
function h(t) {
  const { kzg: m } = t, c = t.to ?? (typeof t.blobs[0] == "string" ? "hex" : "bytes"), s = typeof t.blobs[0] == "string" ? t.blobs.map((o) => b(o)) : t.blobs, i = typeof t.commitments[0] == "string" ? t.commitments.map((o) => b(o)) : t.commitments, n = [];
  for (let o = 0; o < s.length; o++) {
    const f = s[o], l = i[o];
    n.push(Uint8Array.from(m.computeBlobKzgProof(f, l)));
  }
  return c === "bytes" ? n : n.map((o) => y(o));
}
export {
  h as blobsToProofs
};
