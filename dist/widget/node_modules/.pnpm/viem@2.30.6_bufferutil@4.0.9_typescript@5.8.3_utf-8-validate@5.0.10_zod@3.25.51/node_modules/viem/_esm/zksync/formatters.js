import { hexToBigInt as a, hexToNumber as p } from "../utils/encoding/fromHex.js";
import { hexToBytes as m } from "../utils/encoding/toBytes.js";
import { toHex as o } from "../utils/encoding/toHex.js";
import { defineBlock as i } from "../utils/formatters/block.js";
import { formatLog as s } from "../utils/formatters/log.js";
import { defineTransaction as l } from "../utils/formatters/transaction.js";
import { defineTransactionReceipt as f } from "../utils/formatters/transactionReceipt.js";
import { defineTransactionRequest as y } from "../utils/formatters/transactionRequest.js";
import { gasPerPubdataDefault as h } from "./constants/number.js";
const d = {
  block: /* @__PURE__ */ i({
    format(t) {
      var c;
      const e = (c = t.transactions) == null ? void 0 : c.map((n) => {
        var u;
        if (typeof n == "string")
          return n;
        const r = (u = d.transaction) == null ? void 0 : u.format(n);
        return r.typeHex === "0x71" ? r.type = "eip712" : r.typeHex === "0xff" && (r.type = "priority"), r;
      });
      return {
        l1BatchNumber: t.l1BatchNumber ? a(t.l1BatchNumber) : null,
        l1BatchTimestamp: t.l1BatchTimestamp ? a(t.l1BatchTimestamp) : null,
        transactions: e
      };
    }
  }),
  transaction: /* @__PURE__ */ l({
    format(t) {
      const e = {};
      return t.type === "0x71" ? e.type = "eip712" : t.type === "0xff" && (e.type = "priority"), {
        ...e,
        l1BatchNumber: t.l1BatchNumber ? a(t.l1BatchNumber) : null,
        l1BatchTxIndex: t.l1BatchTxIndex ? a(t.l1BatchTxIndex) : null
      };
    }
  }),
  transactionReceipt: /* @__PURE__ */ f({
    format(t) {
      return {
        l1BatchNumber: t.l1BatchNumber ? a(t.l1BatchNumber) : null,
        l1BatchTxIndex: t.l1BatchTxIndex ? a(t.l1BatchTxIndex) : null,
        logs: t.logs.map((e) => ({
          ...s(e),
          l1BatchNumber: e.l1BatchNumber ? a(e.l1BatchNumber) : null,
          transactionLogIndex: p(e.transactionLogIndex),
          logType: e.logType
        })),
        l2ToL1Logs: t.l2ToL1Logs.map((e) => ({
          blockNumber: a(e.blockHash),
          blockHash: e.blockHash,
          l1BatchNumber: e.l1BatchNumber ? a(e.l1BatchNumber) : null,
          transactionIndex: a(e.transactionIndex),
          shardId: a(e.shardId),
          isService: e.isService,
          sender: e.sender,
          key: e.key,
          value: e.value,
          transactionHash: e.transactionHash,
          logIndex: a(e.logIndex)
        }))
      };
    }
  }),
  transactionRequest: /* @__PURE__ */ y({
    exclude: [
      "customSignature",
      "factoryDeps",
      "gasPerPubdata",
      "paymaster",
      "paymasterInput"
    ],
    format(t) {
      return t.gasPerPubdata || t.paymaster && t.paymasterInput || t.factoryDeps || t.customSignature ? {
        eip712Meta: {
          ...t.gasPerPubdata ? { gasPerPubdata: o(t.gasPerPubdata) } : { gasPerPubdata: o(h) },
          ...t.paymaster && t.paymasterInput ? {
            paymasterParams: {
              paymaster: t.paymaster,
              paymasterInput: Array.from(m(t.paymasterInput))
            }
          } : {},
          ...t.factoryDeps ? {
            factoryDeps: t.factoryDeps.map((e) => Array.from(m(e)))
          } : {},
          ...t.customSignature ? {
            customSignature: Array.from(m(t.customSignature))
          } : {}
        },
        type: "0x71"
      } : {};
    }
  })
};
export {
  d as formatters
};
