import { pad as g } from "../../utils/data/pad.js";
import { toBytes as n } from "../../utils/encoding/toBytes.js";
import { sha256 as y } from "../../utils/hash/sha256.js";
import { maxBytecodeSize as r } from "../constants/number.js";
import { BytecodeLengthMustBeDivisibleBy32Error as m, BytecodeLengthExceedsMaxSizeError as a, BytecodeLengthInWordsMustBeOddError as B } from "../errors/bytecode.js";
function b(h) {
  const e = n(h);
  if (e.length % 32 !== 0)
    throw new m({
      givenLength: e.length
    });
  if (e.length > r)
    throw new a({
      givenLength: e.length,
      maxBytecodeSize: r
    });
  const s = y(e), t = n(s), o = e.length / 32;
  if (o % 2 === 0)
    throw new B({
      givenLengthInWords: o
    });
  const d = n(o), i = g(d, { size: 2 }), c = new Uint8Array([1, 0]);
  return t.set(c, 0), t.set(i, 2), t;
}
export {
  b as hashBytecode
};
