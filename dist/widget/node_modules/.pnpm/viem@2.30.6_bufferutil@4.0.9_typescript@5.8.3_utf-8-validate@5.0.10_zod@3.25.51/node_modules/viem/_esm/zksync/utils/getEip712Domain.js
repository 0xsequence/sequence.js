import { toHex as c } from "../../utils/encoding/toHex.js";
import { gasPerPubdataDefault as x } from "../constants/number.js";
import { assertEip712Transaction as d } from "./assertEip712Transaction.js";
import { hashBytecode as f } from "./hashBytecode.js";
const G = (e) => {
  d(e);
  const a = I(e);
  return {
    domain: {
      name: "zkSync",
      version: "2",
      chainId: e.chainId
    },
    types: {
      Transaction: [
        { name: "txType", type: "uint256" },
        { name: "from", type: "uint256" },
        { name: "to", type: "uint256" },
        { name: "gasLimit", type: "uint256" },
        { name: "gasPerPubdataByteLimit", type: "uint256" },
        { name: "maxFeePerGas", type: "uint256" },
        { name: "maxPriorityFeePerGas", type: "uint256" },
        { name: "paymaster", type: "uint256" },
        { name: "nonce", type: "uint256" },
        { name: "value", type: "uint256" },
        { name: "data", type: "bytes" },
        { name: "factoryDeps", type: "bytes32[]" },
        { name: "paymasterInput", type: "bytes" }
      ]
    },
    primaryType: "Transaction",
    message: a
  };
};
function I(e) {
  const { gas: a, nonce: n, to: m, from: s, value: p, maxFeePerGas: y, maxPriorityFeePerGas: o, factoryDeps: t, paymaster: r, paymasterInput: i, gasPerPubdata: u, data: P } = e;
  return {
    txType: 113n,
    from: BigInt(s),
    to: m ? BigInt(m) : 0n,
    gasLimit: a ?? 0n,
    gasPerPubdataByteLimit: u ?? x,
    maxFeePerGas: y ?? 0n,
    maxPriorityFeePerGas: o ?? 0n,
    paymaster: r ? BigInt(r) : 0n,
    nonce: n ? BigInt(n) : 0n,
    value: p ?? 0n,
    data: P ?? "0x",
    factoryDeps: (t == null ? void 0 : t.map((g) => c(f(g)))) ?? [],
    paymasterInput: i || "0x"
  };
}
export {
  G as getEip712Domain
};
