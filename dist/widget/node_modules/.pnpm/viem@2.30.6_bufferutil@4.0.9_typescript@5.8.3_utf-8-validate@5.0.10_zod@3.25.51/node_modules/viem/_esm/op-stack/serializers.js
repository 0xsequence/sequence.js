import { InvalidAddressError as a } from "../errors/address.js";
import { isAddress as f } from "../utils/address/isAddress.js";
import { concatHex as p } from "../utils/data/concat.js";
import { toHex as i } from "../utils/encoding/toHex.js";
import { toRlp as x } from "../utils/encoding/toRlp.js";
import { serializeTransaction as l } from "../utils/transaction/serializeTransaction.js";
function T(r, e) {
  return h(r) ? z(r) : l(r, e);
}
const E = {
  transaction: T
};
function z(r) {
  w(r);
  const { sourceHash: e, data: o, from: m, gas: t, isSystemTx: u, mint: s, to: c, value: n } = r, d = [
    e,
    m,
    c ?? "0x",
    s ? i(s) : "0x",
    n ? i(n) : "0x",
    t ? i(t) : "0x",
    u ? "0x1" : "0x",
    o ?? "0x"
  ];
  return p([
    "0x7e",
    x(d)
  ]);
}
function h(r) {
  return r.type === "deposit" || typeof r.sourceHash < "u";
}
function w(r) {
  const { from: e, to: o } = r;
  if (e && !f(e))
    throw new a({ address: e });
  if (o && !f(o))
    throw new a({ address: o });
}
export {
  w as assertTransactionDeposit,
  T as serializeTransaction,
  E as serializers
};
