import { hexToNumber as i } from "../encoding/fromHex.js";
import { defineFormatter as r } from "./formatter.js";
const u = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function l(e) {
  const d = {
    ...e,
    blockHash: e.blockHash ? e.blockHash : null,
    blockNumber: e.blockNumber ? BigInt(e.blockNumber) : null,
    chainId: e.chainId ? i(e.chainId) : void 0,
    gas: e.gas ? BigInt(e.gas) : void 0,
    gasPrice: e.gasPrice ? BigInt(e.gasPrice) : void 0,
    maxFeePerBlobGas: e.maxFeePerBlobGas ? BigInt(e.maxFeePerBlobGas) : void 0,
    maxFeePerGas: e.maxFeePerGas ? BigInt(e.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: e.maxPriorityFeePerGas ? BigInt(e.maxPriorityFeePerGas) : void 0,
    nonce: e.nonce ? i(e.nonce) : void 0,
    to: e.to ? e.to : null,
    transactionIndex: e.transactionIndex ? Number(e.transactionIndex) : null,
    type: e.type ? u[e.type] : void 0,
    typeHex: e.type ? e.type : void 0,
    value: e.value ? BigInt(e.value) : void 0,
    v: e.v ? BigInt(e.v) : void 0
  };
  return e.authorizationList && (d.authorizationList = m(e.authorizationList)), d.yParity = (() => {
    if (e.yParity)
      return Number(e.yParity);
    if (typeof d.v == "bigint") {
      if (d.v === 0n || d.v === 27n)
        return 0;
      if (d.v === 1n || d.v === 28n)
        return 1;
      if (d.v >= 35n)
        return d.v % 2n === 0n ? 1 : 0;
    }
  })(), d.type === "legacy" && (delete d.accessList, delete d.maxFeePerBlobGas, delete d.maxFeePerGas, delete d.maxPriorityFeePerGas, delete d.yParity), d.type === "eip2930" && (delete d.maxFeePerBlobGas, delete d.maxFeePerGas, delete d.maxPriorityFeePerGas), d.type === "eip1559" && delete d.maxFeePerBlobGas, d;
}
const P = /* @__PURE__ */ r("transaction", l);
function m(e) {
  return e.map((d) => ({
    address: d.address,
    chainId: Number(d.chainId),
    nonce: Number(d.nonce),
    r: d.r,
    s: d.s,
    yParity: Number(d.yParity)
  }));
}
export {
  P as defineTransaction,
  l as formatTransaction,
  u as transactionType
};
