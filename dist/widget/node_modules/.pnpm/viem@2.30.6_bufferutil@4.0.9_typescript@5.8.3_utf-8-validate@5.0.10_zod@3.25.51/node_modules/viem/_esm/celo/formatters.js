import { hexToBigInt as n } from "../utils/encoding/fromHex.js";
import { defineBlock as o } from "../utils/formatters/block.js";
import { defineTransaction as f, formatTransaction as y } from "../utils/formatters/transaction.js";
import { defineTransactionRequest as c } from "../utils/formatters/transactionRequest.js";
import { isCIP64 as a } from "./utils.js";
const d = {
  block: /* @__PURE__ */ o({
    format(e) {
      var i;
      return {
        transactions: (i = e.transactions) == null ? void 0 : i.map((r) => typeof r == "string" ? r : {
          ...y(r),
          ...r.gatewayFee ? {
            gatewayFee: n(r.gatewayFee),
            gatewayFeeRecipient: r.gatewayFeeRecipient
          } : {},
          feeCurrency: r.feeCurrency
        })
      };
    }
  }),
  transaction: /* @__PURE__ */ f({
    format(e) {
      if (e.type === "0x7e")
        return {
          isSystemTx: e.isSystemTx,
          mint: e.mint ? n(e.mint) : void 0,
          sourceHash: e.sourceHash,
          type: "deposit"
        };
      const t = { feeCurrency: e.feeCurrency };
      return e.type === "0x7b" ? t.type = "cip64" : (e.type === "0x7c" && (t.type = "cip42"), t.gatewayFee = e.gatewayFee ? n(e.gatewayFee) : null, t.gatewayFeeRecipient = e.gatewayFeeRecipient), t;
    }
  }),
  transactionRequest: /* @__PURE__ */ c({
    format(e) {
      const t = {};
      return e.feeCurrency && (t.feeCurrency = e.feeCurrency), a(e) && (t.type = "0x7b"), t;
    }
  })
};
export {
  d as formatters
};
