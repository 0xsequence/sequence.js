const o = /* @__PURE__ */ BigInt(4294967295), i = /* @__PURE__ */ BigInt(32);
function s(t, r = !1) {
  return r ? { h: Number(t & o), l: Number(t >> i & o) } : { h: Number(t >> i & o) | 0, l: Number(t & o) | 0 };
}
function h(t, r = !1) {
  const n = t.length;
  let l = new Uint32Array(n), c = new Uint32Array(n);
  for (let e = 0; e < n; e++) {
    const { h: u, l: f } = s(t[e], r);
    [l[e], c[e]] = [u, f];
  }
  return [l, c];
}
const m = (t, r, n) => t << n | r >>> 32 - n, A = (t, r, n) => r << n | t >>> 32 - n, B = (t, r, n) => r << n - 32 | t >>> 64 - n, a = (t, r, n) => t << n - 32 | r >>> 64 - n;
export {
  s as fromBig,
  B as rotlBH,
  a as rotlBL,
  m as rotlSH,
  A as rotlSL,
  h as split
};
