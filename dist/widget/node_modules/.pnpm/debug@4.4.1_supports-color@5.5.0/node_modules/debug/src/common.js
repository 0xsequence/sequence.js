import { __require as v } from "../../../../ms@2.1.3/node_modules/ms/index.js";
function O(d) {
  e.debug = e, e.default = e, e.coerce = C, e.disable = y, e.enable = m, e.enabled = x, e.humanize = v(), e.destroy = k, Object.keys(d).forEach((n) => {
    e[n] = d[n];
  }), e.names = [], e.skips = [], e.formatters = {};
  function h(n) {
    let t = 0;
    for (let o = 0; o < n.length; o++)
      t = (t << 5) - t + n.charCodeAt(o), t |= 0;
    return e.colors[Math.abs(t) % e.colors.length];
  }
  e.selectColor = h;
  function e(n) {
    let t, o = null, r, c;
    function s(...l) {
      if (!s.enabled)
        return;
      const i = s, f = Number(/* @__PURE__ */ new Date()), w = f - (t || f);
      i.diff = w, i.prev = t, i.curr = f, t = f, l[0] = e.coerce(l[0]), typeof l[0] != "string" && l.unshift("%O");
      let u = 0;
      l[0] = l[0].replace(/%([a-zA-Z%])/g, (a, I) => {
        if (a === "%%")
          return "%";
        u++;
        const p = e.formatters[I];
        if (typeof p == "function") {
          const j = l[u];
          a = p.call(i, j), l.splice(u, 1), u--;
        }
        return a;
      }), e.formatArgs.call(i, l), (i.log || e.log).apply(i, l);
    }
    return s.namespace = n, s.useColors = e.useColors(), s.color = e.selectColor(n), s.extend = g, s.destroy = e.destroy, Object.defineProperty(s, "enabled", {
      enumerable: !0,
      configurable: !1,
      get: () => o !== null ? o : (r !== e.namespaces && (r = e.namespaces, c = e.enabled(n)), c),
      set: (l) => {
        o = l;
      }
    }), typeof e.init == "function" && e.init(s), s;
  }
  function g(n, t) {
    const o = e(this.namespace + (typeof t > "u" ? ":" : t) + n);
    return o.log = this.log, o;
  }
  function m(n) {
    e.save(n), e.namespaces = n, e.names = [], e.skips = [];
    const t = (typeof n == "string" ? n : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
    for (const o of t)
      o[0] === "-" ? e.skips.push(o.slice(1)) : e.names.push(o);
  }
  function b(n, t) {
    let o = 0, r = 0, c = -1, s = 0;
    for (; o < n.length; )
      if (r < t.length && (t[r] === n[o] || t[r] === "*"))
        t[r] === "*" ? (c = r, s = o, r++) : (o++, r++);
      else if (c !== -1)
        r = c + 1, s++, o = s;
      else
        return !1;
    for (; r < t.length && t[r] === "*"; )
      r++;
    return r === t.length;
  }
  function y() {
    const n = [
      ...e.names,
      ...e.skips.map((t) => "-" + t)
    ].join(",");
    return e.enable(""), n;
  }
  function x(n) {
    for (const t of e.skips)
      if (b(n, t))
        return !1;
    for (const t of e.names)
      if (b(n, t))
        return !0;
    return !1;
  }
  function C(n) {
    return n instanceof Error ? n.stack || n.message : n;
  }
  function k() {
    console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
  }
  return e.enable(e.load()), e;
}
var q = O;
export {
  q as c
};
