import { PACKET_TYPES as B } from "./commons.js";
const u = typeof Blob == "function" || typeof Blob < "u" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]", s = typeof ArrayBuffer == "function", y = (e) => typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(e) : e && e.buffer instanceof ArrayBuffer, c = ({ type: e, data: r }, n, t) => u && r instanceof Blob ? n ? t(r) : o(r, t) : s && (r instanceof ArrayBuffer || y(r)) ? n ? t(r) : o(new Blob([r]), t) : t(B[e] + (r || "")), o = (e, r) => {
  const n = new FileReader();
  return n.onload = function() {
    const t = n.result.split(",")[1];
    r("b" + (t || ""));
  }, n.readAsDataURL(e);
};
function i(e) {
  return e instanceof Uint8Array ? e : e instanceof ArrayBuffer ? new Uint8Array(e) : new Uint8Array(e.buffer, e.byteOffset, e.byteLength);
}
let f;
function l(e, r) {
  if (u && e.data instanceof Blob)
    return e.data.arrayBuffer().then(i).then(r);
  if (s && (e.data instanceof ArrayBuffer || y(e.data)))
    return r(i(e.data));
  c(e, !1, (n) => {
    f || (f = new TextEncoder()), r(f.encode(n));
  });
}
export {
  c as encodePacket,
  l as encodePacketToBinary
};
