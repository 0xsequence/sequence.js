import * as e from "react";
import { MutationObserver as c } from "../../../../../../@tanstack_query-core@5.80.5/node_modules/@tanstack/query-core/build/modern/mutationObserver.js";
import { notifyManager as i } from "../../../../../../@tanstack_query-core@5.80.5/node_modules/@tanstack/query-core/build/modern/notifyManager.js";
import { noop as l, shouldThrowError as m } from "../../../../../../@tanstack_query-core@5.80.5/node_modules/@tanstack/query-core/build/modern/utils.js";
import { useQueryClient as f } from "./QueryClientProvider.js";
function w(o, b) {
  const s = f(), [r] = e.useState(
    () => new c(
      s,
      o
    )
  );
  e.useEffect(() => {
    r.setOptions(o);
  }, [r, o]);
  const t = e.useSyncExternalStore(
    e.useCallback(
      (u) => r.subscribe(i.batchCalls(u)),
      [r]
    ),
    () => r.getCurrentResult(),
    () => r.getCurrentResult()
  ), n = e.useCallback(
    (u, a) => {
      r.mutate(u, a).catch(l);
    },
    [r]
  );
  if (t.error && m(r.options.throwOnError, [t.error]))
    throw t.error;
  return { ...t, mutate: n, mutateAsync: t.mutate };
}
export {
  w as useMutation
};
