import { Polling as c } from "./polling.js";
import { Emitter as u } from "../../../../../../@socket.io_component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js";
import { installTimerFunctions as f, pick as p } from "../util.js";
import { globalThisShim as a } from "../globals.js";
import { hasCORS as l } from "../contrib/has-cors.js";
function _() {
}
class m extends c {
  /**
   * XHR Polling constructor.
   *
   * @param {Object} opts
   * @package
   */
  constructor(e) {
    if (super(e), typeof location < "u") {
      const s = location.protocol === "https:";
      let t = location.port;
      t || (t = s ? "443" : "80"), this.xd = typeof location < "u" && e.hostname !== location.hostname || t !== e.port;
    }
  }
  /**
   * Sends data.
   *
   * @param {String} data to send.
   * @param {Function} called upon flush.
   * @private
   */
  doWrite(e, s) {
    const t = this.request({
      method: "POST",
      data: e
    });
    t.on("success", s), t.on("error", (r, d) => {
      this.onError("xhr post error", r, d);
    });
  }
  /**
   * Starts a poll cycle.
   *
   * @private
   */
  doPoll() {
    const e = this.request();
    e.on("data", this.onData.bind(this)), e.on("error", (s, t) => {
      this.onError("xhr poll error", s, t);
    }), this.pollXhr = e;
  }
}
class o extends u {
  /**
   * Request constructor
   *
   * @param {Object} options
   * @package
   */
  constructor(e, s, t) {
    super(), this.createRequest = e, f(this, t), this._opts = t, this._method = t.method || "GET", this._uri = s, this._data = t.data !== void 0 ? t.data : null, this._create();
  }
  /**
   * Creates the XHR object and sends the request.
   *
   * @private
   */
  _create() {
    var e;
    const s = p(this._opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
    s.xdomain = !!this._opts.xd;
    const t = this._xhr = this.createRequest(s);
    try {
      t.open(this._method, this._uri, !0);
      try {
        if (this._opts.extraHeaders) {
          t.setDisableHeaderCheck && t.setDisableHeaderCheck(!0);
          for (let r in this._opts.extraHeaders)
            this._opts.extraHeaders.hasOwnProperty(r) && t.setRequestHeader(r, this._opts.extraHeaders[r]);
        }
      } catch {
      }
      if (this._method === "POST")
        try {
          t.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
        } catch {
        }
      try {
        t.setRequestHeader("Accept", "*/*");
      } catch {
      }
      (e = this._opts.cookieJar) === null || e === void 0 || e.addCookies(t), "withCredentials" in t && (t.withCredentials = this._opts.withCredentials), this._opts.requestTimeout && (t.timeout = this._opts.requestTimeout), t.onreadystatechange = () => {
        var r;
        t.readyState === 3 && ((r = this._opts.cookieJar) === null || r === void 0 || r.parseCookies(
          // @ts-ignore
          t.getResponseHeader("set-cookie")
        )), t.readyState === 4 && (t.status === 200 || t.status === 1223 ? this._onLoad() : this.setTimeoutFn(() => {
          this._onError(typeof t.status == "number" ? t.status : 0);
        }, 0));
      }, t.send(this._data);
    } catch (r) {
      this.setTimeoutFn(() => {
        this._onError(r);
      }, 0);
      return;
    }
    typeof document < "u" && (this._index = o.requestsCount++, o.requests[this._index] = this);
  }
  /**
   * Called upon error.
   *
   * @private
   */
  _onError(e) {
    this.emitReserved("error", e, this._xhr), this._cleanup(!0);
  }
  /**
   * Cleans up house.
   *
   * @private
   */
  _cleanup(e) {
    if (!(typeof this._xhr > "u" || this._xhr === null)) {
      if (this._xhr.onreadystatechange = _, e)
        try {
          this._xhr.abort();
        } catch {
        }
      typeof document < "u" && delete o.requests[this._index], this._xhr = null;
    }
  }
  /**
   * Called upon load.
   *
   * @private
   */
  _onLoad() {
    const e = this._xhr.responseText;
    e !== null && (this.emitReserved("data", e), this.emitReserved("success"), this._cleanup());
  }
  /**
   * Aborts the request.
   *
   * @package
   */
  abort() {
    this._cleanup();
  }
}
o.requestsCount = 0;
o.requests = {};
if (typeof document < "u") {
  if (typeof attachEvent == "function")
    attachEvent("onunload", n);
  else if (typeof addEventListener == "function") {
    const i = "onpagehide" in a ? "pagehide" : "unload";
    addEventListener(i, n, !1);
  }
}
function n() {
  for (let i in o.requests)
    o.requests.hasOwnProperty(i) && o.requests[i].abort();
}
const x = function() {
  const i = h({
    xdomain: !1
  });
  return i && i.responseType !== null;
}();
class T extends m {
  constructor(e) {
    super(e);
    const s = e && e.forceBase64;
    this.supportsBinary = x && !s;
  }
  request(e = {}) {
    return Object.assign(e, { xd: this.xd }, this.opts), new o(h, this.uri(), e);
  }
}
function h(i) {
  const e = i.xdomain;
  try {
    if (typeof XMLHttpRequest < "u" && (!e || l))
      return new XMLHttpRequest();
  } catch {
  }
  if (!e)
    try {
      return new a[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
    } catch {
    }
}
export {
  m as BaseXHR,
  o as Request,
  T as XHR
};
