/* eslint-disable */
// sequence-relayer v0.4.1 62dd019c839b6a47985cf41ce45822de8b3e4896
// --
// Code generated by webrpc-gen@v0.24.0 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=relayer.ridl -target=typescript -client -out=./clients/relayer.gen.ts
export const WebrpcHeader = 'Webrpc';
export const WebrpcHeaderValue = 'webrpc@v0.24.0;gen-typescript@v0.16.3;sequence-relayer@v0.4.1';
// WebRPC description and code-gen version
export const WebRPCVersion = 'v1';
// Schema version of your RIDL schema
export const WebRPCSchemaVersion = 'v0.4.1';
// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = '62dd019c839b6a47985cf41ce45822de8b3e4896';
export function VersionFromHeader(headers) {
    const headerValue = headers.get(WebrpcHeader);
    if (!headerValue) {
        return {
            webrpcGenVersion: '',
            codeGenName: '',
            codeGenVersion: '',
            schemaName: '',
            schemaVersion: '',
        };
    }
    return parseWebrpcGenVersions(headerValue);
}
function parseWebrpcGenVersions(header) {
    const versions = header.split(';');
    if (versions.length < 3) {
        return {
            webrpcGenVersion: '',
            codeGenName: '',
            codeGenVersion: '',
            schemaName: '',
            schemaVersion: '',
        };
    }
    const [_, webrpcGenVersion] = versions[0].split('@');
    const [codeGenName, codeGenVersion] = versions[1].split('@');
    const [schemaName, schemaVersion] = versions[2].split('@');
    return {
        webrpcGenVersion: webrpcGenVersion ?? '',
        codeGenName: codeGenName ?? '',
        codeGenVersion: codeGenVersion ?? '',
        schemaName: schemaName ?? '',
        schemaVersion: schemaVersion ?? '',
    };
}
//
// Types
//
export var ETHTxnStatus;
(function (ETHTxnStatus) {
    ETHTxnStatus["UNKNOWN"] = "UNKNOWN";
    ETHTxnStatus["DROPPED"] = "DROPPED";
    ETHTxnStatus["QUEUED"] = "QUEUED";
    ETHTxnStatus["SENT"] = "SENT";
    ETHTxnStatus["SUCCEEDED"] = "SUCCEEDED";
    ETHTxnStatus["PARTIALLY_FAILED"] = "PARTIALLY_FAILED";
    ETHTxnStatus["FAILED"] = "FAILED";
    ETHTxnStatus["PENDING_PRECONDITION"] = "PENDING_PRECONDITION";
})(ETHTxnStatus || (ETHTxnStatus = {}));
export var TransferType;
(function (TransferType) {
    TransferType["SEND"] = "SEND";
    TransferType["RECEIVE"] = "RECEIVE";
    TransferType["BRIDGE_DEPOSIT"] = "BRIDGE_DEPOSIT";
    TransferType["BRIDGE_WITHDRAW"] = "BRIDGE_WITHDRAW";
    TransferType["BURN"] = "BURN";
    TransferType["UNKNOWN"] = "UNKNOWN";
})(TransferType || (TransferType = {}));
export var FeeTokenType;
(function (FeeTokenType) {
    FeeTokenType["UNKNOWN"] = "UNKNOWN";
    FeeTokenType["ERC20_TOKEN"] = "ERC20_TOKEN";
    FeeTokenType["ERC1155_TOKEN"] = "ERC1155_TOKEN";
})(FeeTokenType || (FeeTokenType = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["DESC"] = "DESC";
    SortOrder["ASC"] = "ASC";
})(SortOrder || (SortOrder = {}));
//
// Client
//
export class Relayer {
    hostname;
    fetch;
    path = '/rpc/Relayer/';
    constructor(hostname, fetch) {
        this.hostname = hostname.replace(/\/*$/, '');
        this.fetch = (input, init) => fetch(input, init);
    }
    url(name) {
        return this.hostname + this.path + name;
    }
    ping = (headers, signal) => {
        return this.fetch(this.url('Ping'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    status: _data.status,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    version = (headers, signal) => {
        return this.fetch(this.url('Version'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    version: _data.version,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    runtimeStatus = (headers, signal) => {
        return this.fetch(this.url('RuntimeStatus'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    status: _data.status,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getSequenceContext = (headers, signal) => {
        return this.fetch(this.url('GetSequenceContext'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    data: _data.data,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getChainID = (headers, signal) => {
        return this.fetch(this.url('GetChainID'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    chainID: _data.chainID,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sendMetaTxn = (args, headers, signal) => {
        return this.fetch(this.url('SendMetaTxn'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    status: _data.status,
                    txnHash: _data.txnHash,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getMetaTxnNonce = (args, headers, signal) => {
        return this.fetch(this.url('GetMetaTxnNonce'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    nonce: _data.nonce,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getMetaTxnReceipt = (args, headers, signal) => {
        return this.fetch(this.url('GetMetaTxnReceipt'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    receipt: _data.receipt,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    simulate = (args, headers, signal) => {
        return this.fetch(this.url('Simulate'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    results: _data.results,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    updateMetaTxnGasLimits = (args, headers, signal) => {
        return this.fetch(this.url('UpdateMetaTxnGasLimits'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    payload: _data.payload,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    feeTokens = (headers, signal) => {
        return this.fetch(this.url('FeeTokens'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    isFeeRequired: _data.isFeeRequired,
                    tokens: _data.tokens,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    feeOptions = (args, headers, signal) => {
        return this.fetch(this.url('FeeOptions'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    options: _data.options,
                    sponsored: _data.sponsored,
                    quote: _data.quote,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getMetaTxnNetworkFeeOptions = (args, headers, signal) => {
        return this.fetch(this.url('GetMetaTxnNetworkFeeOptions'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    options: _data.options,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getMetaTransactions = (args, headers, signal) => {
        return this.fetch(this.url('GetMetaTransactions'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    page: _data.page,
                    transactions: _data.transactions,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getTransactionCost = (args, headers, signal) => {
        return this.fetch(this.url('GetTransactionCost'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    cost: _data.cost,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sentTransactions = (args, headers, signal) => {
        return this.fetch(this.url('SentTransactions'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    page: _data.page,
                    transactions: _data.transactions,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    pendingTransactions = (args, headers, signal) => {
        return this.fetch(this.url('PendingTransactions'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    page: _data.page,
                    transactions: _data.transactions,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getGasTank = (args, headers, signal) => {
        return this.fetch(this.url('GetGasTank'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    gasTank: _data.gasTank,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    addGasTank = (args, headers, signal) => {
        return this.fetch(this.url('AddGasTank'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    status: _data.status,
                    gasTank: _data.gasTank,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    updateGasTank = (args, headers, signal) => {
        return this.fetch(this.url('UpdateGasTank'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    status: _data.status,
                    gasTank: _data.gasTank,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    nextGasTankBalanceAdjustmentNonce = (args, headers, signal) => {
        return this.fetch(this.url('NextGasTankBalanceAdjustmentNonce'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    nonce: _data.nonce,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    adjustGasTankBalance = (args, headers, signal) => {
        return this.fetch(this.url('AdjustGasTankBalance'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    status: _data.status,
                    adjustment: _data.adjustment,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getGasTankBalanceAdjustment = (args, headers, signal) => {
        return this.fetch(this.url('GetGasTankBalanceAdjustment'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    adjustment: _data.adjustment,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    listGasTankBalanceAdjustments = (args, headers, signal) => {
        return this.fetch(this.url('ListGasTankBalanceAdjustments'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    page: _data.page,
                    adjustments: _data.adjustments,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    listGasSponsors = (args, headers, signal) => {
        return this.fetch(this.url('ListGasSponsors'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    page: _data.page,
                    gasSponsors: _data.gasSponsors,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getGasSponsor = (args, headers, signal) => {
        return this.fetch(this.url('GetGasSponsor'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    gasSponsor: _data.gasSponsor,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    addGasSponsor = (args, headers, signal) => {
        return this.fetch(this.url('AddGasSponsor'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    status: _data.status,
                    gasSponsor: _data.gasSponsor,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    updateGasSponsor = (args, headers, signal) => {
        return this.fetch(this.url('UpdateGasSponsor'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    status: _data.status,
                    gasSponsor: _data.gasSponsor,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    removeGasSponsor = (args, headers, signal) => {
        return this.fetch(this.url('RemoveGasSponsor'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    status: _data.status,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    addressGasSponsors = (args, headers, signal) => {
        return this.fetch(this.url('AddressGasSponsors'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    page: _data.page,
                    gasSponsors: _data.gasSponsors,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getProjectBalance = (args, headers, signal) => {
        return this.fetch(this.url('GetProjectBalance'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    balance: _data.balance,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    adjustProjectBalance = (args, headers, signal) => {
        return this.fetch(this.url('AdjustProjectBalance'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then((_data) => {
                return {
                    balance: _data.balance,
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
}
const createHTTPRequest = (body = {}, headers = {}, signal = null) => {
    const reqHeaders = { ...headers, 'Content-Type': 'application/json' };
    reqHeaders[WebrpcHeader] = WebrpcHeaderValue;
    return {
        method: 'POST',
        headers: reqHeaders,
        body: JSON.stringify(body || {}),
        signal,
    };
};
const buildResponse = (res) => {
    return res.text().then((text) => {
        let data;
        try {
            data = JSON.parse(text);
        }
        catch (error) {
            let message = '';
            if (error instanceof Error) {
                message = error.message;
            }
            throw WebrpcBadResponseError.new({
                status: res.status,
                cause: `JSON.parse(): ${message}: response text: ${text}`,
            });
        }
        if (!res.ok) {
            const code = typeof data.code === 'number' ? data.code : 0;
            throw (webrpcErrorByCode[code] || WebrpcError).new(data);
        }
        return data;
    });
};
//
// Errors
//
export class WebrpcError extends Error {
    name;
    code;
    message;
    status;
    cause;
    /** @deprecated Use message instead of msg. Deprecated in webrpc v0.11.0. */
    msg;
    constructor(name, code, message, status, cause) {
        super(message);
        this.name = name || 'WebrpcError';
        this.code = typeof code === 'number' ? code : 0;
        this.message = message || `endpoint error ${this.code}`;
        this.msg = this.message;
        this.status = typeof status === 'number' ? status : 0;
        this.cause = cause;
        Object.setPrototypeOf(this, WebrpcError.prototype);
    }
    static new(payload) {
        return new this(payload.error, payload.code, payload.message || payload.msg, payload.status, payload.cause);
    }
}
// Webrpc errors
export class WebrpcEndpointError extends WebrpcError {
    constructor(name = 'WebrpcEndpoint', code = 0, message = `endpoint error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcEndpointError.prototype);
    }
}
export class WebrpcRequestFailedError extends WebrpcError {
    constructor(name = 'WebrpcRequestFailed', code = -1, message = `request failed`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype);
    }
}
export class WebrpcBadRouteError extends WebrpcError {
    constructor(name = 'WebrpcBadRoute', code = -2, message = `bad route`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadRouteError.prototype);
    }
}
export class WebrpcBadMethodError extends WebrpcError {
    constructor(name = 'WebrpcBadMethod', code = -3, message = `bad method`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadMethodError.prototype);
    }
}
export class WebrpcBadRequestError extends WebrpcError {
    constructor(name = 'WebrpcBadRequest', code = -4, message = `bad request`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadRequestError.prototype);
    }
}
export class WebrpcBadResponseError extends WebrpcError {
    constructor(name = 'WebrpcBadResponse', code = -5, message = `bad response`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadResponseError.prototype);
    }
}
export class WebrpcServerPanicError extends WebrpcError {
    constructor(name = 'WebrpcServerPanic', code = -6, message = `server panic`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcServerPanicError.prototype);
    }
}
export class WebrpcInternalErrorError extends WebrpcError {
    constructor(name = 'WebrpcInternalError', code = -7, message = `internal error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcInternalErrorError.prototype);
    }
}
export class WebrpcClientDisconnectedError extends WebrpcError {
    constructor(name = 'WebrpcClientDisconnected', code = -8, message = `client disconnected`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcClientDisconnectedError.prototype);
    }
}
export class WebrpcStreamLostError extends WebrpcError {
    constructor(name = 'WebrpcStreamLost', code = -9, message = `stream lost`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcStreamLostError.prototype);
    }
}
export class WebrpcStreamFinishedError extends WebrpcError {
    constructor(name = 'WebrpcStreamFinished', code = -10, message = `stream finished`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcStreamFinishedError.prototype);
    }
}
// Schema errors
export class UnauthorizedError extends WebrpcError {
    constructor(name = 'Unauthorized', code = 1000, message = `Unauthorized access`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, UnauthorizedError.prototype);
    }
}
export class PermissionDeniedError extends WebrpcError {
    constructor(name = 'PermissionDenied', code = 1001, message = `Permission denied`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, PermissionDeniedError.prototype);
    }
}
export class SessionExpiredError extends WebrpcError {
    constructor(name = 'SessionExpired', code = 1002, message = `Session expired`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, SessionExpiredError.prototype);
    }
}
export class MethodNotFoundError extends WebrpcError {
    constructor(name = 'MethodNotFound', code = 1003, message = `Method not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, MethodNotFoundError.prototype);
    }
}
export class RequestConflictError extends WebrpcError {
    constructor(name = 'RequestConflict', code = 1004, message = `Conflict with target resource`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, RequestConflictError.prototype);
    }
}
export class AbortedError extends WebrpcError {
    constructor(name = 'Aborted', code = 1005, message = `Request aborted`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, AbortedError.prototype);
    }
}
export class GeoblockedError extends WebrpcError {
    constructor(name = 'Geoblocked', code = 1006, message = `Geoblocked region`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, GeoblockedError.prototype);
    }
}
export class RateLimitedError extends WebrpcError {
    constructor(name = 'RateLimited', code = 1007, message = `Rate-limited. Please slow down.`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, RateLimitedError.prototype);
    }
}
export class ProjectNotFoundError extends WebrpcError {
    constructor(name = 'ProjectNotFound', code = 1008, message = `Project not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, ProjectNotFoundError.prototype);
    }
}
export class AccessKeyNotFoundError extends WebrpcError {
    constructor(name = 'AccessKeyNotFound', code = 1101, message = `Access key not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, AccessKeyNotFoundError.prototype);
    }
}
export class AccessKeyMismatchError extends WebrpcError {
    constructor(name = 'AccessKeyMismatch', code = 1102, message = `Access key mismatch`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, AccessKeyMismatchError.prototype);
    }
}
export class InvalidOriginError extends WebrpcError {
    constructor(name = 'InvalidOrigin', code = 1103, message = `Invalid origin for Access Key`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, InvalidOriginError.prototype);
    }
}
export class InvalidServiceError extends WebrpcError {
    constructor(name = 'InvalidService', code = 1104, message = `Service not enabled for Access key`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, InvalidServiceError.prototype);
    }
}
export class UnauthorizedUserError extends WebrpcError {
    constructor(name = 'UnauthorizedUser', code = 1105, message = `Unauthorized user`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, UnauthorizedUserError.prototype);
    }
}
export class QuotaExceededError extends WebrpcError {
    constructor(name = 'QuotaExceeded', code = 1200, message = `Quota request exceeded`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, QuotaExceededError.prototype);
    }
}
export class QuotaRateLimitError extends WebrpcError {
    constructor(name = 'QuotaRateLimit', code = 1201, message = `Quota rate limit exceeded`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, QuotaRateLimitError.prototype);
    }
}
export class NoDefaultKeyError extends WebrpcError {
    constructor(name = 'NoDefaultKey', code = 1300, message = `No default access key found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, NoDefaultKeyError.prototype);
    }
}
export class MaxAccessKeysError extends WebrpcError {
    constructor(name = 'MaxAccessKeys', code = 1301, message = `Access keys limit reached`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, MaxAccessKeysError.prototype);
    }
}
export class AtLeastOneKeyError extends WebrpcError {
    constructor(name = 'AtLeastOneKey', code = 1302, message = `You need at least one Access Key`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, AtLeastOneKeyError.prototype);
    }
}
export class TimeoutError extends WebrpcError {
    constructor(name = 'Timeout', code = 1900, message = `Request timed out`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, TimeoutError.prototype);
    }
}
export class InvalidArgumentError extends WebrpcError {
    constructor(name = 'InvalidArgument', code = 2001, message = `Invalid argument`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, InvalidArgumentError.prototype);
    }
}
export class UnavailableError extends WebrpcError {
    constructor(name = 'Unavailable', code = 2002, message = `Unavailable resource`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, UnavailableError.prototype);
    }
}
export class QueryFailedError extends WebrpcError {
    constructor(name = 'QueryFailed', code = 2003, message = `Query failed`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, QueryFailedError.prototype);
    }
}
export class NotFoundError extends WebrpcError {
    constructor(name = 'NotFound', code = 3000, message = `Resource not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, NotFoundError.prototype);
    }
}
export class InsufficientFeeError extends WebrpcError {
    constructor(name = 'InsufficientFee', code = 3004, message = `Insufficient fee`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, InsufficientFeeError.prototype);
    }
}
export var errors;
(function (errors) {
    errors["WebrpcEndpoint"] = "WebrpcEndpoint";
    errors["WebrpcRequestFailed"] = "WebrpcRequestFailed";
    errors["WebrpcBadRoute"] = "WebrpcBadRoute";
    errors["WebrpcBadMethod"] = "WebrpcBadMethod";
    errors["WebrpcBadRequest"] = "WebrpcBadRequest";
    errors["WebrpcBadResponse"] = "WebrpcBadResponse";
    errors["WebrpcServerPanic"] = "WebrpcServerPanic";
    errors["WebrpcInternalError"] = "WebrpcInternalError";
    errors["WebrpcClientDisconnected"] = "WebrpcClientDisconnected";
    errors["WebrpcStreamLost"] = "WebrpcStreamLost";
    errors["WebrpcStreamFinished"] = "WebrpcStreamFinished";
    errors["Unauthorized"] = "Unauthorized";
    errors["PermissionDenied"] = "PermissionDenied";
    errors["SessionExpired"] = "SessionExpired";
    errors["MethodNotFound"] = "MethodNotFound";
    errors["RequestConflict"] = "RequestConflict";
    errors["Aborted"] = "Aborted";
    errors["Geoblocked"] = "Geoblocked";
    errors["RateLimited"] = "RateLimited";
    errors["ProjectNotFound"] = "ProjectNotFound";
    errors["AccessKeyNotFound"] = "AccessKeyNotFound";
    errors["AccessKeyMismatch"] = "AccessKeyMismatch";
    errors["InvalidOrigin"] = "InvalidOrigin";
    errors["InvalidService"] = "InvalidService";
    errors["UnauthorizedUser"] = "UnauthorizedUser";
    errors["QuotaExceeded"] = "QuotaExceeded";
    errors["QuotaRateLimit"] = "QuotaRateLimit";
    errors["NoDefaultKey"] = "NoDefaultKey";
    errors["MaxAccessKeys"] = "MaxAccessKeys";
    errors["AtLeastOneKey"] = "AtLeastOneKey";
    errors["Timeout"] = "Timeout";
    errors["InvalidArgument"] = "InvalidArgument";
    errors["Unavailable"] = "Unavailable";
    errors["QueryFailed"] = "QueryFailed";
    errors["NotFound"] = "NotFound";
    errors["InsufficientFee"] = "InsufficientFee";
})(errors || (errors = {}));
export var WebrpcErrorCodes;
(function (WebrpcErrorCodes) {
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcEndpoint"] = 0] = "WebrpcEndpoint";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcRequestFailed"] = -1] = "WebrpcRequestFailed";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadRoute"] = -2] = "WebrpcBadRoute";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadMethod"] = -3] = "WebrpcBadMethod";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadRequest"] = -4] = "WebrpcBadRequest";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadResponse"] = -5] = "WebrpcBadResponse";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcServerPanic"] = -6] = "WebrpcServerPanic";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcInternalError"] = -7] = "WebrpcInternalError";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcClientDisconnected"] = -8] = "WebrpcClientDisconnected";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcStreamLost"] = -9] = "WebrpcStreamLost";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcStreamFinished"] = -10] = "WebrpcStreamFinished";
    WebrpcErrorCodes[WebrpcErrorCodes["Unauthorized"] = 1000] = "Unauthorized";
    WebrpcErrorCodes[WebrpcErrorCodes["PermissionDenied"] = 1001] = "PermissionDenied";
    WebrpcErrorCodes[WebrpcErrorCodes["SessionExpired"] = 1002] = "SessionExpired";
    WebrpcErrorCodes[WebrpcErrorCodes["MethodNotFound"] = 1003] = "MethodNotFound";
    WebrpcErrorCodes[WebrpcErrorCodes["RequestConflict"] = 1004] = "RequestConflict";
    WebrpcErrorCodes[WebrpcErrorCodes["Aborted"] = 1005] = "Aborted";
    WebrpcErrorCodes[WebrpcErrorCodes["Geoblocked"] = 1006] = "Geoblocked";
    WebrpcErrorCodes[WebrpcErrorCodes["RateLimited"] = 1007] = "RateLimited";
    WebrpcErrorCodes[WebrpcErrorCodes["ProjectNotFound"] = 1008] = "ProjectNotFound";
    WebrpcErrorCodes[WebrpcErrorCodes["AccessKeyNotFound"] = 1101] = "AccessKeyNotFound";
    WebrpcErrorCodes[WebrpcErrorCodes["AccessKeyMismatch"] = 1102] = "AccessKeyMismatch";
    WebrpcErrorCodes[WebrpcErrorCodes["InvalidOrigin"] = 1103] = "InvalidOrigin";
    WebrpcErrorCodes[WebrpcErrorCodes["InvalidService"] = 1104] = "InvalidService";
    WebrpcErrorCodes[WebrpcErrorCodes["UnauthorizedUser"] = 1105] = "UnauthorizedUser";
    WebrpcErrorCodes[WebrpcErrorCodes["QuotaExceeded"] = 1200] = "QuotaExceeded";
    WebrpcErrorCodes[WebrpcErrorCodes["QuotaRateLimit"] = 1201] = "QuotaRateLimit";
    WebrpcErrorCodes[WebrpcErrorCodes["NoDefaultKey"] = 1300] = "NoDefaultKey";
    WebrpcErrorCodes[WebrpcErrorCodes["MaxAccessKeys"] = 1301] = "MaxAccessKeys";
    WebrpcErrorCodes[WebrpcErrorCodes["AtLeastOneKey"] = 1302] = "AtLeastOneKey";
    WebrpcErrorCodes[WebrpcErrorCodes["Timeout"] = 1900] = "Timeout";
    WebrpcErrorCodes[WebrpcErrorCodes["InvalidArgument"] = 2001] = "InvalidArgument";
    WebrpcErrorCodes[WebrpcErrorCodes["Unavailable"] = 2002] = "Unavailable";
    WebrpcErrorCodes[WebrpcErrorCodes["QueryFailed"] = 2003] = "QueryFailed";
    WebrpcErrorCodes[WebrpcErrorCodes["NotFound"] = 3000] = "NotFound";
    WebrpcErrorCodes[WebrpcErrorCodes["InsufficientFee"] = 3004] = "InsufficientFee";
})(WebrpcErrorCodes || (WebrpcErrorCodes = {}));
export const webrpcErrorByCode = {
    [0]: WebrpcEndpointError,
    [-1]: WebrpcRequestFailedError,
    [-2]: WebrpcBadRouteError,
    [-3]: WebrpcBadMethodError,
    [-4]: WebrpcBadRequestError,
    [-5]: WebrpcBadResponseError,
    [-6]: WebrpcServerPanicError,
    [-7]: WebrpcInternalErrorError,
    [-8]: WebrpcClientDisconnectedError,
    [-9]: WebrpcStreamLostError,
    [-10]: WebrpcStreamFinishedError,
    [1000]: UnauthorizedError,
    [1001]: PermissionDeniedError,
    [1002]: SessionExpiredError,
    [1003]: MethodNotFoundError,
    [1004]: RequestConflictError,
    [1005]: AbortedError,
    [1006]: GeoblockedError,
    [1007]: RateLimitedError,
    [1008]: ProjectNotFoundError,
    [1101]: AccessKeyNotFoundError,
    [1102]: AccessKeyMismatchError,
    [1103]: InvalidOriginError,
    [1104]: InvalidServiceError,
    [1105]: UnauthorizedUserError,
    [1200]: QuotaExceededError,
    [1201]: QuotaRateLimitError,
    [1300]: NoDefaultKeyError,
    [1301]: MaxAccessKeysError,
    [1302]: AtLeastOneKeyError,
    [1900]: TimeoutError,
    [2001]: InvalidArgumentError,
    [2002]: UnavailableError,
    [2003]: QueryFailedError,
    [3000]: NotFoundError,
    [3004]: InsufficientFeeError,
};
