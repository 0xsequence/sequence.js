/* eslint-disable */
// trails-api v0.4.0 1f8ef0bd3ab5a1f717035e46d67de5abb2fbc648
// --
// Code generated by Webrpc-gen@v0.29.0 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=api.ridl -target=typescript -client -out=./clients/trails-api.gen.ts

// Webrpc description and code-gen version
export const WebrpcVersion = 'v1'

// Schema version of your RIDL schema
export const WebrpcSchemaVersion = 'v0.4.0'

// Schema hash generated from your RIDL schema
export const WebrpcSchemaHash = '1f8ef0bd3ab5a1f717035e46d67de5abb2fbc648'

//
// Client interface
//

export interface APIClient {
  ping(headers?: object, signal?: AbortSignal): Promise<PingResponse>

  version(headers?: object, signal?: AbortSignal): Promise<VersionResponse>

  runtimeStatus(headers?: object, signal?: AbortSignal): Promise<RuntimeStatusResponse>

  clock(headers?: object, signal?: AbortSignal): Promise<ClockResponse>

  /**
   * TODO: a lot of overlap with IntentConfig and other stuff..
   */
  executeIntent(req: ExecuteIntentRequest, headers?: object, signal?: AbortSignal): Promise<ExecuteIntentResponse>

  /**
   * Generates complete intent execution payloads including calls, preconditions, meta transactions, and quotes for cross-chain swaps/transfers.
   */
  getIntentCallsPayloads(
    req: GetIntentCallsPayloadsRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetIntentCallsPayloadsResponse>

  getIntentsQuote(req: GetIntentsQuoteRequest, headers?: object, signal?: AbortSignal): Promise<GetIntentsQuoteResponse>

  /**
   * Persists intent configuration details to database for later execution, creating a new intent config record.
   */
  commitIntentConfig(req: CommitIntentConfigRequest, headers?: object, signal?: AbortSignal): Promise<CommitIntentConfigResponse>

  /**
   * Retrieves stored intent configuration by wallet address for inspection or execution.
   */
  getIntentConfig(req: GetIntentConfigRequest, headers?: object, signal?: AbortSignal): Promise<GetIntentConfigResponse>

  /**
   * Intent transaction history endpoint
   */
  getIntentTransactionHistory(
    req: GetIntentTransactionHistoryRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetIntentTransactionHistoryResponse>

  /**
   * Generates gasless meta transaction for depositing tokens into an Intent Entrypoint contract.
   */
  getIntentEntrypointDeposit(
    req: GetIntentEntrypointDepositRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetIntentEntrypointDepositResponse>

  /**
   * Calculates fee options for intent entrypoint deposits.
   */
  getIntentEntrypointDepositFeeOptions(
    req: GetIntentEntrypointDepositFeeOptionsRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetIntentEntrypointDepositFeeOptionsResponse>

  /**
   * Calculates the EIP-712 message hash that user needs to sign for intent entrypoint deposit.
   */
  getIntentEntrypointMessageHash(
    req: GetIntentEntrypointMessageHashRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetIntentEntrypointMessageHashResponse>

  getCCTPTransfer(req: GetCCTPTransferRequest, headers?: object, signal?: AbortSignal): Promise<GetCCTPTransferResponse>

  queueCCTPTransfer(req: QueueCCTPTransferRequest, headers?: object, signal?: AbortSignal): Promise<QueueCCTPTransferResponse>

  /**
   * Marks an intent config as ready for processing by the execution worker.
   */
  queueIntentConfigExecution(
    req: QueueIntentConfigExecutionRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<QueueIntentConfigExecutionResponse>

  /**
   * Returns current execution status (pending/processing/executed/failed) for a given intent config.
   */
  getIntentConfigExecutionStatus(
    req: GetIntentConfigExecutionStatusRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetIntentConfigExecutionStatusResponse>

  /**
   * Paginated listing of intent configs with optional execution status filtering.
   */
  listIntentConfigs(req: ListIntentConfigsRequest, headers?: object, signal?: AbortSignal): Promise<ListIntentConfigsResponse>

  /**
   * Processes relay transaction receipts to update intent execution status and trigger refund logic.
   */
  queueMetaTxnReceipt(
    req: QueueMetaTxnReceiptRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<QueueMetaTxnReceiptResponse>
}

//
// Schema types
//

export enum ExecutionStatus {
  created = 'created',
  pending = 'pending',
  processing = 'processing',
  executed = 'executed',
  failed = 'failed'
}

export enum SortOrder {
  DESC = 'DESC',
  ASC = 'ASC'
}

export enum TradeType {
  EXACT_INPUT = 'EXACT_INPUT',
  EXACT_OUTPUT = 'EXACT_OUTPUT'
}

export interface Version {
  webrpcVersion: string
  schemaVersion: string
  schemaHash: string
  appVersion: string
}

export interface RuntimeStatus {
  healthOK: boolean
  startTime: string
  uptime: number
  ver: string
  branch: string
  commitHash: string
  runnables: any
}

export interface MetaTxn {
  id: string
  chainId: string
  walletAddress: string
  contract: string
  input: string
}

export interface Call {
  to: string
  value?: string
  data?: string
  gasLimit?: string
  delegateCall?: boolean
  onlyFallback?: boolean
  behaviorOnError?: number
}

export interface IntentCallsPayload {
  chainId: string
  space?: string
  nonce?: string
  calls: Array<Call>
}

export interface IntentConfig {
  id: number
  configHash: string
  originIntentAddress: string
  destinationIntentAddress: string
  mainSigner: string
  calls: Array<IntentCallsPayload>
  preconditions: Array<IntentPrecondition>
  executionStatus: ExecutionStatus
  metaTxnId?: string
  txnHash?: string
  processedAt?: string
  retryCount: number
  updatedAt?: string
  createdAt?: string
}

export interface IntentTransaction {
  originIntentAddress: string
  destinationIntentAddress: string
  mainSigner: string
  metaTxnId?: string
  txnHash?: string
  executionStatus: ExecutionStatus
  originChainId?: number
  destinationChainId?: number
  originTokenAddress?: string
  originTokenAmount?: string
  destinationTokenAddress?: string
  destinationTokenAmount?: string
  destinationToAddress?: string
  createdAt?: string
}

export interface MetaTxnReceipt {
  metaTxID: string
  status: string
  txnReceipt?: string
  revertReason?: string
}

export interface AddressOverrides {
  sequenceWalletFactoryAddress?: string
  sequenceWalletMainModuleAddress?: string
  sequenceWalletMainModuleUpgradableAddress?: string
  sequenceWalletGuestModuleAddress?: string
  sequenceWalletUtilsAddress?: string
}

export interface OriginCall {
  chainId: number
  to: string
  transactionData: string
  transactionValue: string
}

export interface IntentPrecondition {
  type: string
  chainId: string
  data: IntentPreconditionData
}

export interface IntentPreconditionData {
  address: string
  token: string
  min: number
}

export interface Token {
  chainId: number
  contractAddress: string
  tokenId?: string
}

export interface Price {
  value: number
  currency: string
}

export interface TokenPrice {
  token: Token
  price?: Price
  price24hChange?: Price
  price24hVol?: Price
  floorPrice: Price
  buyPrice: Price
  sellPrice: Price
  updatedAt: string
}

export interface ExchangeRate {
  name: string
  symbol: string
  value: number
  vsCurrency: string
  currencyType: string
}

export interface Page {
  pageSize?: number
  page?: number
  totalRecords?: number
  column?: string
  before?: any
  after?: any
  sort?: Array<SortBy>
  more?: boolean
}

export interface SortBy {
  column: string
  order: SortOrder
}

export interface CCTPTransfer {
  id: string
  sourceTxHash: string
  sourceChainId: number
  destinationChainId: number
  message: string
  attestation: string
  status: string
  createdAt: string
  updatedAt: string
}

export interface GetIntentCallsPayloadParams {
  userAddress: string
  destinationChainId: number
  destinationTokenAddress: string
  destinationTokenAmount: string
  destinationToAddress: string
  originChainId: number
  originTokenAddress: string
  originTokenAmount: string
  destinationCallData?: string
  destinationCallValue?: string
  provider?: string
  addressOverrides?: AddressOverrides
  destinationSalt?: string
  slippageTolerance?: number
  tradeType?: TradeType
}

export interface GetIntentsQuoteParams {
  userAddress: string
  destinationChainId: number
  destinationTokenAddress: string
  destinationTokenAmount: string
  destinationToAddress: string
  originChainId: number
  originTokenAddress: string
  originTokenAmount: string
  destinationCallData?: string
  destinationCallValue?: string
  provider?: string
  addressOverrides?: AddressOverrides
  destinationSalt?: string
  slippageTolerance?: number
  tradeType?: TradeType
  exactInputOriginalTokenAmount?: string
}

export interface CommitIntentConfigParams {
  originIntentAddress: string
  destinationIntentAddress: string
  mainSigner: string
  calls: Array<IntentCallsPayload>
  preconditions: Array<IntentPrecondition>
  addressOverrides?: AddressOverrides
  requestParams?: IntentRequestParams
}

export interface IntentRequestParams {
  version: string
  userAddress: string
  destinationChainId: number
  destinationTokenAddress: string
  destinationTokenAmount: string
  destinationToAddress: string
  originChainId: number
  originTokenAddress: string
  originTokenAmount: string
  destinationCallData?: string
  destinationCallValue?: string
  createdAt: string
}

export interface IntentCallsPayloads {
  id: string
  calls: Array<IntentCallsPayload>
  preconditions: Array<IntentPrecondition>
  metaTxns: Array<MetaTxn>
  trailsFee: TrailsFee
  quote: IntentQuote
  feeQuotes: { [key: string]: string }
  originIntentAddress: string
  destinationIntentAddress: string
}

export interface CrossChainFee {
  providerFee: string
  trailsSwapFee: string
  providerFeeUSD: number
  trailsSwapFeeUSD: number
  totalFeeAmount: string
  totalFeeUSD: number
}

export interface MetaTxnFeeDetail {
  metaTxnID: string
  estimatedGasLimit: string
  feeNative: string
}

export interface ChainExecuteQuote {
  chainId: string
  totalGasLimit: string
  gasPrice: string
  totalFeeAmount: string
  nativeTokenSymbol: string
  nativeTokenPrice?: string
  metaTxnFeeDetails: Array<MetaTxnFeeDetail>
  totalFeeUSD?: string
}

export interface ExecuteQuote {
  chainQuotes: Array<ChainExecuteQuote>
}

export interface TrailsFee {
  executeQuote: ExecuteQuote
  crossChainFee?: CrossChainFee
  feeToken?: string
  originTokenTotalAmount?: string
  totalFeeAmount?: string
  totalFeeUSD?: string
  quoteProvider?: string
}

export interface IntentQuote {
  fromAmount: string
  fromAmountMin: string
  toAmount: string
  toAmountMin: string
  priceImpact: number
  priceImpactUsd: string
  maxSlippage: number
  quoteProvider: string
  quoteProviderRequestId: string
  quoteProviderFeeUsd: string
  feeQuotes: { [key: string]: string }
}

export interface GetIntentEntrypointDepositParams {
  userAddress: string
  tokenAddress: string
  amount: string
  intentAddress: string
  chainID: number
  deadline: number
  intentSignature: string
  usePermit?: boolean
  permitAmount?: string
  permitDeadline?: number
  permitSignature?: string
  feeAmount?: string
}

export interface GetIntentEntrypointDepositResult {
  depositWalletAddress: string
  metaTxn: MetaTxn
  feeQuote: string
  entrypointAddress: string
}

export interface GetIntentEntrypointMessageHashParams {
  userAddress: string
  tokenAddress: string
  amount: string
  intentAddress: string
  chainID: number
  deadline: number
  nonce: string
  feeAmount: string
  feeCollector: string
}

export interface GetIntentEntrypointDepositFeeOptionsParams {
  userAddress: string
  tokenAddress: string
  intentAddress: string
  amount: string
  chainID: number
}

export interface GetIntentEntrypointDepositFeeOptionsResult {
  gasEstimate: GasEstimate
  feeOptions: Array<FeeOption>
  expiresAt: number
  feeCollector: string
}

export interface GasEstimate {
  totalGas: number
  gasPrice: string
  nativeCost: string
  nativeCostUSD: number
}

export interface FeeOption {
  tokenAddress: string
  tokenSymbol: string
  tokenDecimals: number
  amount: string
  amountUSD: number
  feeCollector: string
}

export interface PingRequest {}

export interface PingResponse {
  status: boolean
}

export interface VersionRequest {}

export interface VersionResponse {
  version: Version
}

export interface RuntimeStatusRequest {}

export interface RuntimeStatusResponse {
  status: RuntimeStatus
}

export interface ClockRequest {}

export interface ClockResponse {
  serverTime: string
}

export interface ExecuteIntentRequest {
  intent: CommitIntentConfigParams
}

export interface ExecuteIntentResponse {
  config: IntentConfig
}

export interface GetIntentCallsPayloadsRequest {
  params: GetIntentCallsPayloadParams
}

export interface GetIntentCallsPayloadsResponse {
  payloads: IntentCallsPayloads
}

export interface GetIntentsQuoteRequest {
  params: GetIntentsQuoteParams
}

export interface GetIntentsQuoteResponse {
  quote: IntentQuote
}

export interface CommitIntentConfigRequest {
  params: CommitIntentConfigParams
}

export interface CommitIntentConfigResponse {
  config: IntentConfig
}

export interface GetIntentConfigRequest {
  intentAddress: string
}

export interface GetIntentConfigResponse {
  config: IntentConfig
}

export interface GetIntentTransactionHistoryRequest {
  accountAddress: string
  page?: Page
}

export interface GetIntentTransactionHistoryResponse {
  page: Page
  transactions: Array<IntentTransaction>
}

export interface GetIntentEntrypointDepositRequest {
  params: GetIntentEntrypointDepositParams
}

export interface GetIntentEntrypointDepositResponse {
  result: GetIntentEntrypointDepositResult
}

export interface GetIntentEntrypointDepositFeeOptionsRequest {
  params: GetIntentEntrypointDepositFeeOptionsParams
}

export interface GetIntentEntrypointDepositFeeOptionsResponse {
  result: GetIntentEntrypointDepositFeeOptionsResult
}

export interface GetIntentEntrypointMessageHashRequest {
  params: GetIntentEntrypointMessageHashParams
}

export interface GetIntentEntrypointMessageHashResponse {
  messageHash: string
}

export interface GetCCTPTransferRequest {
  id: string
}

export interface GetCCTPTransferResponse {
  transfer: CCTPTransfer
}

export interface QueueCCTPTransferRequest {
  sourceTxHash?: string
  metaTxHash?: string
  sourceChainId: number
  destinationChainId: number
}

export interface QueueCCTPTransferResponse {
  transfer: CCTPTransfer
}

export interface QueueIntentConfigExecutionRequest {
  intentConfigId: number
}

export interface QueueIntentConfigExecutionResponse {
  status: boolean
}

export interface GetIntentConfigExecutionStatusRequest {
  intentConfigId: number
}

export interface GetIntentConfigExecutionStatusResponse {
  executionStatus: string
}

export interface ListIntentConfigsRequest {
  page?: Page
  executionStatus?: string
}

export interface ListIntentConfigsResponse {
  page: Page
  intentConfigs: Array<IntentConfig>
}

export interface QueueMetaTxnReceiptRequest {
  metaTxID: string
}

export interface QueueMetaTxnReceiptResponse {
  status: boolean
}

//
// Client
//

export class API implements APIClient {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/API/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname.replace(/\/*$/, '')
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }

  ping = (headers?: object, signal?: AbortSignal): Promise<PingResponse> => {
    return this.fetch(this.url('Ping'), createHttpRequest({}, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            status: <boolean>_data.status
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  version = (headers?: object, signal?: AbortSignal): Promise<VersionResponse> => {
    return this.fetch(this.url('Version'), createHttpRequest({}, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            version: <Version>_data.version
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  runtimeStatus = (headers?: object, signal?: AbortSignal): Promise<RuntimeStatusResponse> => {
    return this.fetch(this.url('RuntimeStatus'), createHttpRequest({}, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            status: <RuntimeStatus>_data.status
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  clock = (headers?: object, signal?: AbortSignal): Promise<ClockResponse> => {
    return this.fetch(this.url('Clock'), createHttpRequest({}, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            serverTime: <string>_data.serverTime
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  executeIntent = (req: ExecuteIntentRequest, headers?: object, signal?: AbortSignal): Promise<ExecuteIntentResponse> => {
    return this.fetch(this.url('ExecuteIntent'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            config: <IntentConfig>_data.config
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  getIntentCallsPayloads = (
    req: GetIntentCallsPayloadsRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetIntentCallsPayloadsResponse> => {
    return this.fetch(this.url('GetIntentCallsPayloads'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            payloads: <IntentCallsPayloads>_data.payloads
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  getIntentsQuote = (req: GetIntentsQuoteRequest, headers?: object, signal?: AbortSignal): Promise<GetIntentsQuoteResponse> => {
    return this.fetch(this.url('GetIntentsQuote'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            quote: <IntentQuote>_data.quote
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  commitIntentConfig = (
    req: CommitIntentConfigRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<CommitIntentConfigResponse> => {
    return this.fetch(this.url('CommitIntentConfig'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            config: <IntentConfig>_data.config
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  getIntentConfig = (req: GetIntentConfigRequest, headers?: object, signal?: AbortSignal): Promise<GetIntentConfigResponse> => {
    return this.fetch(this.url('GetIntentConfig'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            config: <IntentConfig>_data.config
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  getIntentTransactionHistory = (
    req: GetIntentTransactionHistoryRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetIntentTransactionHistoryResponse> => {
    return this.fetch(this.url('GetIntentTransactionHistory'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            page: <Page>_data.page,
            transactions: <Array<IntentTransaction>>_data.transactions
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  getIntentEntrypointDeposit = (
    req: GetIntentEntrypointDepositRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetIntentEntrypointDepositResponse> => {
    return this.fetch(this.url('GetIntentEntrypointDeposit'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            result: <GetIntentEntrypointDepositResult>_data.result
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  getIntentEntrypointDepositFeeOptions = (
    req: GetIntentEntrypointDepositFeeOptionsRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetIntentEntrypointDepositFeeOptionsResponse> => {
    return this.fetch(this.url('GetIntentEntrypointDepositFeeOptions'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            result: <GetIntentEntrypointDepositFeeOptionsResult>_data.result
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  getIntentEntrypointMessageHash = (
    req: GetIntentEntrypointMessageHashRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetIntentEntrypointMessageHashResponse> => {
    return this.fetch(this.url('GetIntentEntrypointMessageHash'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            messageHash: <string>_data.messageHash
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  getCCTPTransfer = (req: GetCCTPTransferRequest, headers?: object, signal?: AbortSignal): Promise<GetCCTPTransferResponse> => {
    return this.fetch(this.url('GetCCTPTransfer'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            transfer: <CCTPTransfer>_data.transfer
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  queueCCTPTransfer = (
    req: QueueCCTPTransferRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<QueueCCTPTransferResponse> => {
    return this.fetch(this.url('QueueCCTPTransfer'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            transfer: <CCTPTransfer>_data.transfer
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  queueIntentConfigExecution = (
    req: QueueIntentConfigExecutionRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<QueueIntentConfigExecutionResponse> => {
    return this.fetch(this.url('QueueIntentConfigExecution'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            status: <boolean>_data.status
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  getIntentConfigExecutionStatus = (
    req: GetIntentConfigExecutionStatusRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<GetIntentConfigExecutionStatusResponse> => {
    return this.fetch(this.url('GetIntentConfigExecutionStatus'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            executionStatus: <string>_data.executionStatus
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  listIntentConfigs = (
    req: ListIntentConfigsRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<ListIntentConfigsResponse> => {
    return this.fetch(this.url('ListIntentConfigs'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            page: <Page>_data.page,
            intentConfigs: <Array<IntentConfig>>_data.intentConfigs
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }

  queueMetaTxnReceipt = (
    req: QueueMetaTxnReceiptRequest,
    headers?: object,
    signal?: AbortSignal
  ): Promise<QueueMetaTxnReceiptResponse> => {
    return this.fetch(this.url('QueueMetaTxnReceipt'), createHttpRequest(req, headers, signal)).then(
      res => {
        return buildResponse(res).then(_data => {
          return {
            status: <boolean>_data.status
          }
        })
      },
      error => {
        throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
      }
    )
  }
}

const createHttpRequest = (body: object = {}, headers: object = {}, signal: AbortSignal | null = null): object => {
  const reqHeaders: { [key: string]: string } = { ...headers, 'Content-Type': 'application/json' }

  return {
    method: 'POST',
    headers: reqHeaders,
    body: JSON.stringify(body || {}),
    signal
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch (error) {
      throw WebrpcBadResponseError.new({
        status: res.status,
        cause: `JSON.parse(): ${error instanceof Error ? error.message : String(error)}: response text: ${text}`
      })
    }
    if (!res.ok) {
      const code: number = typeof data.code === 'number' ? data.code : 0
      throw (webrpcErrorByCode[code] || WebrpcError).new(data)
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>

//
// Errors
//

type WebrpcErrorParams = { name?: string; code?: number; message?: string; status?: number; cause?: string }

export class WebrpcError extends Error {
  name: string
  code: number
  message: string
  status: number
  cause?: string

  constructor(error: WebrpcErrorParams = {}) {
    super(error.message)
    this.name = error.name || 'WebrpcEndpointError'
    this.code = typeof error.code === 'number' ? error.code : 0
    this.message = error.message || `endpoint error`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcError.prototype)
  }

  static new(payload: any): WebrpcError {
    return new this({ message: payload.message, code: payload.code, status: payload.status, cause: payload.cause })
  }
}

export class WebrpcEndpointError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcEndpoint'
    this.code = typeof error.code === 'number' ? error.code : 0
    this.message = error.message || `endpoint error`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcEndpointError.prototype)
  }
}

export class WebrpcRequestFailedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcRequestFailed'
    this.code = typeof error.code === 'number' ? error.code : -1
    this.message = error.message || `request failed`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype)
  }
}

export class WebrpcBadRouteError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcBadRoute'
    this.code = typeof error.code === 'number' ? error.code : -2
    this.message = error.message || `bad route`
    this.status = typeof error.status === 'number' ? error.status : 404
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcBadRouteError.prototype)
  }
}

export class WebrpcBadMethodError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcBadMethod'
    this.code = typeof error.code === 'number' ? error.code : -3
    this.message = error.message || `bad method`
    this.status = typeof error.status === 'number' ? error.status : 405
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcBadMethodError.prototype)
  }
}

export class WebrpcBadRequestError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcBadRequest'
    this.code = typeof error.code === 'number' ? error.code : -4
    this.message = error.message || `bad request`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcBadRequestError.prototype)
  }
}

export class WebrpcBadResponseError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcBadResponse'
    this.code = typeof error.code === 'number' ? error.code : -5
    this.message = error.message || `bad response`
    this.status = typeof error.status === 'number' ? error.status : 500
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcBadResponseError.prototype)
  }
}

export class WebrpcServerPanicError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcServerPanic'
    this.code = typeof error.code === 'number' ? error.code : -6
    this.message = error.message || `server panic`
    this.status = typeof error.status === 'number' ? error.status : 500
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcServerPanicError.prototype)
  }
}

export class WebrpcInternalErrorError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcInternalError'
    this.code = typeof error.code === 'number' ? error.code : -7
    this.message = error.message || `internal error`
    this.status = typeof error.status === 'number' ? error.status : 500
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcInternalErrorError.prototype)
  }
}

export class WebrpcClientAbortedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcClientAborted'
    this.code = typeof error.code === 'number' ? error.code : -8
    this.message = error.message || `request aborted by client`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcClientAbortedError.prototype)
  }
}

export class WebrpcStreamLostError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcStreamLost'
    this.code = typeof error.code === 'number' ? error.code : -9
    this.message = error.message || `stream lost`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcStreamLostError.prototype)
  }
}

export class WebrpcStreamFinishedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcStreamFinished'
    this.code = typeof error.code === 'number' ? error.code : -10
    this.message = error.message || `stream finished`
    this.status = typeof error.status === 'number' ? error.status : 200
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcStreamFinishedError.prototype)
  }
}

//
// Schema errors
//

export class UnauthorizedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'Unauthorized'
    this.code = typeof error.code === 'number' ? error.code : 1000
    this.message = error.message || `Unauthorized access`
    this.status = typeof error.status === 'number' ? error.status : 401
    this.cause = error.cause
    Object.setPrototypeOf(this, UnauthorizedError.prototype)
  }
}

export class PermissionDeniedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'PermissionDenied'
    this.code = typeof error.code === 'number' ? error.code : 1001
    this.message = error.message || `Permission denied`
    this.status = typeof error.status === 'number' ? error.status : 403
    this.cause = error.cause
    Object.setPrototypeOf(this, PermissionDeniedError.prototype)
  }
}

export class SessionExpiredError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'SessionExpired'
    this.code = typeof error.code === 'number' ? error.code : 1002
    this.message = error.message || `Session expired`
    this.status = typeof error.status === 'number' ? error.status : 403
    this.cause = error.cause
    Object.setPrototypeOf(this, SessionExpiredError.prototype)
  }
}

export class MethodNotFoundError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'MethodNotFound'
    this.code = typeof error.code === 'number' ? error.code : 1003
    this.message = error.message || `Method not found`
    this.status = typeof error.status === 'number' ? error.status : 404
    this.cause = error.cause
    Object.setPrototypeOf(this, MethodNotFoundError.prototype)
  }
}

export class RequestConflictError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'RequestConflict'
    this.code = typeof error.code === 'number' ? error.code : 1004
    this.message = error.message || `Conflict with target resource`
    this.status = typeof error.status === 'number' ? error.status : 409
    this.cause = error.cause
    Object.setPrototypeOf(this, RequestConflictError.prototype)
  }
}

export class AbortedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'Aborted'
    this.code = typeof error.code === 'number' ? error.code : 1005
    this.message = error.message || `Request aborted`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, AbortedError.prototype)
  }
}

export class GeoblockedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'Geoblocked'
    this.code = typeof error.code === 'number' ? error.code : 1006
    this.message = error.message || `Geoblocked region`
    this.status = typeof error.status === 'number' ? error.status : 451
    this.cause = error.cause
    Object.setPrototypeOf(this, GeoblockedError.prototype)
  }
}

export class RateLimitedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'RateLimited'
    this.code = typeof error.code === 'number' ? error.code : 1007
    this.message = error.message || `Rate-limited. Please slow down.`
    this.status = typeof error.status === 'number' ? error.status : 429
    this.cause = error.cause
    Object.setPrototypeOf(this, RateLimitedError.prototype)
  }
}

export class ProjectNotFoundError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'ProjectNotFound'
    this.code = typeof error.code === 'number' ? error.code : 1008
    this.message = error.message || `Project not found`
    this.status = typeof error.status === 'number' ? error.status : 401
    this.cause = error.cause
    Object.setPrototypeOf(this, ProjectNotFoundError.prototype)
  }
}

export class AccessKeyNotFoundError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'AccessKeyNotFound'
    this.code = typeof error.code === 'number' ? error.code : 1101
    this.message = error.message || `Access key not found`
    this.status = typeof error.status === 'number' ? error.status : 401
    this.cause = error.cause
    Object.setPrototypeOf(this, AccessKeyNotFoundError.prototype)
  }
}

export class AccessKeyMismatchError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'AccessKeyMismatch'
    this.code = typeof error.code === 'number' ? error.code : 1102
    this.message = error.message || `Access key mismatch`
    this.status = typeof error.status === 'number' ? error.status : 409
    this.cause = error.cause
    Object.setPrototypeOf(this, AccessKeyMismatchError.prototype)
  }
}

export class InvalidOriginError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'InvalidOrigin'
    this.code = typeof error.code === 'number' ? error.code : 1103
    this.message = error.message || `Invalid origin for Access Key`
    this.status = typeof error.status === 'number' ? error.status : 403
    this.cause = error.cause
    Object.setPrototypeOf(this, InvalidOriginError.prototype)
  }
}

export class InvalidServiceError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'InvalidService'
    this.code = typeof error.code === 'number' ? error.code : 1104
    this.message = error.message || `Service not enabled for Access key`
    this.status = typeof error.status === 'number' ? error.status : 403
    this.cause = error.cause
    Object.setPrototypeOf(this, InvalidServiceError.prototype)
  }
}

export class UnauthorizedUserError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'UnauthorizedUser'
    this.code = typeof error.code === 'number' ? error.code : 1105
    this.message = error.message || `Unauthorized user`
    this.status = typeof error.status === 'number' ? error.status : 403
    this.cause = error.cause
    Object.setPrototypeOf(this, UnauthorizedUserError.prototype)
  }
}

export class QuotaExceededError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'QuotaExceeded'
    this.code = typeof error.code === 'number' ? error.code : 1200
    this.message = error.message || `Quota request exceeded`
    this.status = typeof error.status === 'number' ? error.status : 429
    this.cause = error.cause
    Object.setPrototypeOf(this, QuotaExceededError.prototype)
  }
}

export class QuotaRateLimitError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'QuotaRateLimit'
    this.code = typeof error.code === 'number' ? error.code : 1201
    this.message = error.message || `Quota rate limit exceeded`
    this.status = typeof error.status === 'number' ? error.status : 429
    this.cause = error.cause
    Object.setPrototypeOf(this, QuotaRateLimitError.prototype)
  }
}

export class NoDefaultKeyError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'NoDefaultKey'
    this.code = typeof error.code === 'number' ? error.code : 1300
    this.message = error.message || `No default access key found`
    this.status = typeof error.status === 'number' ? error.status : 403
    this.cause = error.cause
    Object.setPrototypeOf(this, NoDefaultKeyError.prototype)
  }
}

export class MaxAccessKeysError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'MaxAccessKeys'
    this.code = typeof error.code === 'number' ? error.code : 1301
    this.message = error.message || `Access keys limit reached`
    this.status = typeof error.status === 'number' ? error.status : 403
    this.cause = error.cause
    Object.setPrototypeOf(this, MaxAccessKeysError.prototype)
  }
}

export class AtLeastOneKeyError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'AtLeastOneKey'
    this.code = typeof error.code === 'number' ? error.code : 1302
    this.message = error.message || `You need at least one Access Key`
    this.status = typeof error.status === 'number' ? error.status : 403
    this.cause = error.cause
    Object.setPrototypeOf(this, AtLeastOneKeyError.prototype)
  }
}

export class TimeoutError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'Timeout'
    this.code = typeof error.code === 'number' ? error.code : 1900
    this.message = error.message || `Request timed out`
    this.status = typeof error.status === 'number' ? error.status : 408
    this.cause = error.cause
    Object.setPrototypeOf(this, TimeoutError.prototype)
  }
}

export class InvalidArgumentError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'InvalidArgument'
    this.code = typeof error.code === 'number' ? error.code : 2000
    this.message = error.message || `Invalid argument`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, InvalidArgumentError.prototype)
  }
}

export class UnavailableError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'Unavailable'
    this.code = typeof error.code === 'number' ? error.code : 2002
    this.message = error.message || `Unavailable resource`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, UnavailableError.prototype)
  }
}

export class QueryFailedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'QueryFailed'
    this.code = typeof error.code === 'number' ? error.code : 2003
    this.message = error.message || `Query failed`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, QueryFailedError.prototype)
  }
}

export class NotFoundError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'NotFound'
    this.code = typeof error.code === 'number' ? error.code : 8000
    this.message = error.message || `Resource not found`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, NotFoundError.prototype)
  }
}

export class UnsupportedNetworkError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'UnsupportedNetwork'
    this.code = typeof error.code === 'number' ? error.code : 8008
    this.message = error.message || `Unsupported network`
    this.status = typeof error.status === 'number' ? error.status : 422
    this.cause = error.cause
    Object.setPrototypeOf(this, UnsupportedNetworkError.prototype)
  }
}

export enum errors {
  WebrpcEndpoint = 'WebrpcEndpoint',
  WebrpcRequestFailed = 'WebrpcRequestFailed',
  WebrpcBadRoute = 'WebrpcBadRoute',
  WebrpcBadMethod = 'WebrpcBadMethod',
  WebrpcBadRequest = 'WebrpcBadRequest',
  WebrpcBadResponse = 'WebrpcBadResponse',
  WebrpcServerPanic = 'WebrpcServerPanic',
  WebrpcInternalError = 'WebrpcInternalError',
  WebrpcClientAborted = 'WebrpcClientAborted',
  WebrpcStreamLost = 'WebrpcStreamLost',
  WebrpcStreamFinished = 'WebrpcStreamFinished',
  Unauthorized = 'Unauthorized',
  PermissionDenied = 'PermissionDenied',
  SessionExpired = 'SessionExpired',
  MethodNotFound = 'MethodNotFound',
  RequestConflict = 'RequestConflict',
  Aborted = 'Aborted',
  Geoblocked = 'Geoblocked',
  RateLimited = 'RateLimited',
  ProjectNotFound = 'ProjectNotFound',
  AccessKeyNotFound = 'AccessKeyNotFound',
  AccessKeyMismatch = 'AccessKeyMismatch',
  InvalidOrigin = 'InvalidOrigin',
  InvalidService = 'InvalidService',
  UnauthorizedUser = 'UnauthorizedUser',
  QuotaExceeded = 'QuotaExceeded',
  QuotaRateLimit = 'QuotaRateLimit',
  NoDefaultKey = 'NoDefaultKey',
  MaxAccessKeys = 'MaxAccessKeys',
  AtLeastOneKey = 'AtLeastOneKey',
  Timeout = 'Timeout',
  InvalidArgument = 'InvalidArgument',
  Unavailable = 'Unavailable',
  QueryFailed = 'QueryFailed',
  NotFound = 'NotFound',
  UnsupportedNetwork = 'UnsupportedNetwork'
}

export enum WebrpcErrorCodes {
  WebrpcEndpoint = 0,
  WebrpcRequestFailed = -1,
  WebrpcBadRoute = -2,
  WebrpcBadMethod = -3,
  WebrpcBadRequest = -4,
  WebrpcBadResponse = -5,
  WebrpcServerPanic = -6,
  WebrpcInternalError = -7,
  WebrpcClientAborted = -8,
  WebrpcStreamLost = -9,
  WebrpcStreamFinished = -10,
  Unauthorized = 1000,
  PermissionDenied = 1001,
  SessionExpired = 1002,
  MethodNotFound = 1003,
  RequestConflict = 1004,
  Aborted = 1005,
  Geoblocked = 1006,
  RateLimited = 1007,
  ProjectNotFound = 1008,
  AccessKeyNotFound = 1101,
  AccessKeyMismatch = 1102,
  InvalidOrigin = 1103,
  InvalidService = 1104,
  UnauthorizedUser = 1105,
  QuotaExceeded = 1200,
  QuotaRateLimit = 1201,
  NoDefaultKey = 1300,
  MaxAccessKeys = 1301,
  AtLeastOneKey = 1302,
  Timeout = 1900,
  InvalidArgument = 2000,
  Unavailable = 2002,
  QueryFailed = 2003,
  NotFound = 8000,
  UnsupportedNetwork = 8008
}

export const webrpcErrorByCode: { [code: number]: any } = {
  [0]: WebrpcEndpointError,
  [-1]: WebrpcRequestFailedError,
  [-2]: WebrpcBadRouteError,
  [-3]: WebrpcBadMethodError,
  [-4]: WebrpcBadRequestError,
  [-5]: WebrpcBadResponseError,
  [-6]: WebrpcServerPanicError,
  [-7]: WebrpcInternalErrorError,
  [-8]: WebrpcClientAbortedError,
  [-9]: WebrpcStreamLostError,
  [-10]: WebrpcStreamFinishedError,
  [1000]: UnauthorizedError,
  [1001]: PermissionDeniedError,
  [1002]: SessionExpiredError,
  [1003]: MethodNotFoundError,
  [1004]: RequestConflictError,
  [1005]: AbortedError,
  [1006]: GeoblockedError,
  [1007]: RateLimitedError,
  [1008]: ProjectNotFoundError,
  [1101]: AccessKeyNotFoundError,
  [1102]: AccessKeyMismatchError,
  [1103]: InvalidOriginError,
  [1104]: InvalidServiceError,
  [1105]: UnauthorizedUserError,
  [1200]: QuotaExceededError,
  [1201]: QuotaRateLimitError,
  [1300]: NoDefaultKeyError,
  [1301]: MaxAccessKeysError,
  [1302]: AtLeastOneKeyError,
  [1900]: TimeoutError,
  [2000]: InvalidArgumentError,
  [2002]: UnavailableError,
  [2003]: QueryFailedError,
  [8000]: NotFoundError,
  [8008]: UnsupportedNetworkError
}

//
// Webrpc
//

export const WebrpcHeader = 'Webrpc'

export const WebrpcHeaderValue = 'webrpc@v0.29.0;gen-typescript@v0.20.2;trails-api@v0.4.0'

type WebrpcGenVersions = {
  WebrpcGenVersion: string
  codeGenName: string
  codeGenVersion: string
  schemaName: string
  schemaVersion: string
}

export function VersionFromHeader(headers: Headers): WebrpcGenVersions {
  const headerValue = headers.get(WebrpcHeader)
  if (!headerValue) {
    return {
      WebrpcGenVersion: '',
      codeGenName: '',
      codeGenVersion: '',
      schemaName: '',
      schemaVersion: ''
    }
  }

  return parseWebrpcGenVersions(headerValue)
}

function parseWebrpcGenVersions(header: string): WebrpcGenVersions {
  const versions = header.split(';')
  if (versions.length < 3) {
    return {
      WebrpcGenVersion: '',
      codeGenName: '',
      codeGenVersion: '',
      schemaName: '',
      schemaVersion: ''
    }
  }

  const [_, WebrpcGenVersion] = versions[0]!.split('@')
  const [codeGenName, codeGenVersion] = versions[1]!.split('@')
  const [schemaName, schemaVersion] = versions[2]!.split('@')

  return {
    WebrpcGenVersion: WebrpcGenVersion ?? '',
    codeGenName: codeGenName ?? '',
    codeGenVersion: codeGenVersion ?? '',
    schemaName: schemaName ?? '',
    schemaVersion: schemaVersion ?? ''
  }
}
