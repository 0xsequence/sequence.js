/* eslint-disable */
// sequence-relayer v0.4.0 d784d18f9c415ddcbab69bcd216a54ae5fe83340
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.4.0"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "d784d18f9c415ddcbab69bcd216a54ae5fe83340"


//
// Types
//
export enum ETHTxnStatus {
  UNKNOWN = 'UNKNOWN',
  FAILED = 'FAILED',
  PARTIALLY_FAILED = 'PARTIALLY_FAILED',
  SENT = 'SENT',
  REVERTED = 'REVERTED',
  SUCCESS = 'SUCCESS',
  FINAL = 'FINAL',
  DROPPED = 'DROPPED',
  QUEUED = 'QUEUED'
}

export enum TransferType {
  SEND = 'SEND',
  RECEIVE = 'RECEIVE',
  BRIDGE_DEPOSIT = 'BRIDGE_DEPOSIT',
  BRIDGE_WITHDRAW = 'BRIDGE_WITHDRAW',
  BURN = 'BURN',
  UNKNOWN = 'UNKNOWN'
}

export enum FeeTokenType {
  UNKNOWN = 'UNKNOWN',
  ERC20_TOKEN = 'ERC20_TOKEN',
  ERC1155_TOKEN = 'ERC1155_TOKEN'
}

export enum SortOrder {
  DESC = 'DESC',
  ASC = 'ASC'
}

export interface Version {
  webrpcVersion: string
  schemaVersion: string
  schemaHash: string
  appVersion: string
}

export interface RuntimeStatus {
  healthOK: boolean
}

export interface SequenceContext {
  factory: string
  mainModule: string
  mainModuleUpgradable: string
  guestModule: string
  utils: string
}

export interface WalletConfig {
  address: string
  signers: Array<WalletSigner>
  threshold: number
  chainId?: number
}

export interface WalletSigner {
  address: string
  weight: number
}

export interface MetaTxn {
  contract: string
  input: string
}

export interface TxnObj {
  to: string
  objs: Array<TxnObj>
  txnStatus: string
  txnRevertReason: string
  logs?: Array<any>
}

export interface MetaTxnLog {
  id: number
  txnHash?: string
  txnNonce?: string
  metaTxnID?: string
  txnStatus: ETHTxnStatus
  txnRevertReason: string
  target: string
  input: string
  txnArgs: {[key: string]: any}
  txnReceipt?: {[key: string]: any}
  walletAddress: string
  metaTxnNonce: string
  gasLimit: number
  gasPrice: string
  gasUsed: number
  updatedAt: string
  createdAt: string
}

export interface MetaTxnEntry {
  id: number
  metaTxnID: string
  txnStatus: ETHTxnStatus
  txnRevertReason: string
  index: number
  logs?: Array<any>
  updatedAt: string
  createdAt: string
}

export interface MetaTxnReceipt {
  id: string
  status: string
  revertReason: string
  gasUsed: number
  txnReceipt: string
  batch: TxnObj
}

export interface Transaction {
  txnHash?: string
  blockNumber: number
  chainId: number
  metaTxnID?: string
  transfers?: Array<TxnLogTransfer>
  entries?: TxnObj
  users?: {[key: string]: TxnLogUser}
  timestamp: string
}

export interface TxnLogUser {
  username: string
}

export interface TxnLogTransfer {
  transferType: TransferType
  contractAddress: string
  from: string
  to: string
  ids: Array<string>
  amounts: Array<string>
}

export interface TransactionHistoryFilter {
  users?: Array<string>
  contractHandles?: Array<string>
  transactionHashes?: Array<string>
  fromBlock?: number
  toBlock?: number
}

export interface SentTransactionsFilter {
  pending: boolean
  failed: boolean
}

export interface FeeOption {
  token: FeeToken
  to: string
  value: string
  gasLimit: number
}

export interface FeeToken {
  chainId: number
  name: string
  symbol: string
  type: FeeTokenType
  decimals?: number
  logoURL: string
  contractAddress?: string
  originAddress?: string
  tokenID?: string
}

export interface Page {
  pageSize?: number
  page?: number
  totalRecords?: number
  column?: string
  before?: any
  after?: any
  sort?: Array<SortBy>
}

export interface SortBy {
  column: string
  order: SortOrder
}

export interface Relayer {
  ping(headers?: object): Promise<PingReturn>
  version(headers?: object): Promise<VersionReturn>
  runtimeStatus(headers?: object): Promise<RuntimeStatusReturn>
  getSequenceContext(headers?: object): Promise<GetSequenceContextReturn>
  getChainID(headers?: object): Promise<GetChainIDReturn>
  sendMetaTxn(args: SendMetaTxnArgs, headers?: object): Promise<SendMetaTxnReturn>
  getMetaTxnNonce(args: GetMetaTxnNonceArgs, headers?: object): Promise<GetMetaTxnNonceReturn>
  getMetaTxnReceipt(args: GetMetaTxnReceiptArgs, headers?: object): Promise<GetMetaTxnReceiptReturn>
  updateMetaTxnGasLimits(args: UpdateMetaTxnGasLimitsArgs, headers?: object): Promise<UpdateMetaTxnGasLimitsReturn>
  feeTokens(headers?: object): Promise<FeeTokensReturn>
  getMetaTxnNetworkFeeOptions(args: GetMetaTxnNetworkFeeOptionsArgs, headers?: object): Promise<GetMetaTxnNetworkFeeOptionsReturn>
  metaTxLogList(args: MetaTxLogListArgs, headers?: object): Promise<MetaTxLogListReturn>
  transactionHistory(args: TransactionHistoryArgs, headers?: object): Promise<TransactionHistoryReturn>
  sentTransactions(args: SentTransactionsArgs, headers?: object): Promise<SentTransactionsReturn>
}

export interface PingArgs {
}

export interface PingReturn {
  status: boolean  
}
export interface VersionArgs {
}

export interface VersionReturn {
  version: Version  
}
export interface RuntimeStatusArgs {
}

export interface RuntimeStatusReturn {
  status: RuntimeStatus  
}
export interface GetSequenceContextArgs {
}

export interface GetSequenceContextReturn {
  data: SequenceContext  
}
export interface GetChainIDArgs {
}

export interface GetChainIDReturn {
  chainID: number  
}
export interface SendMetaTxnArgs {
  call: MetaTxn
}

export interface SendMetaTxnReturn {
  status: boolean
  txnHash: string  
}
export interface GetMetaTxnNonceArgs {
  walletContractAddress: string
  space?: string
}

export interface GetMetaTxnNonceReturn {
  nonce: string  
}
export interface GetMetaTxnReceiptArgs {
  metaTxID: string
}

export interface GetMetaTxnReceiptReturn {
  receipt: MetaTxnReceipt  
}
export interface UpdateMetaTxnGasLimitsArgs {
  walletAddress: string
  walletConfig: WalletConfig
  payload: string
}

export interface UpdateMetaTxnGasLimitsReturn {
  payload: string  
}
export interface FeeTokensArgs {
}

export interface FeeTokensReturn {
  isFeeRequired: boolean
  tokens: Array<FeeToken>  
}
export interface GetMetaTxnNetworkFeeOptionsArgs {
  walletConfig: WalletConfig
  payload: string
}

export interface GetMetaTxnNetworkFeeOptionsReturn {
  options: Array<FeeOption>  
}
export interface MetaTxLogListArgs {
  page?: Page
}

export interface MetaTxLogListReturn {
  page: Page
  logs: Array<MetaTxnLog>  
}
export interface TransactionHistoryArgs {
  filter: TransactionHistoryFilter
  page?: Page
}

export interface TransactionHistoryReturn {
  page: Page
  transactions: Array<Transaction>  
}
export interface SentTransactionsArgs {
  filter: SentTransactionsFilter
  page?: Page
}

export interface SentTransactionsReturn {
  page: Page
  transactions: Array<Transaction>  
}


  
//
// Client
//
export class Relayer implements Relayer {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/Relayer/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  ping = (headers?: object): Promise<PingReturn> => {
    return this.fetch(
      this.url('Ping'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status)
        }
      })
    })
  }
  
  version = (headers?: object): Promise<VersionReturn> => {
    return this.fetch(
      this.url('Version'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          version: <Version>(_data.version)
        }
      })
    })
  }
  
  runtimeStatus = (headers?: object): Promise<RuntimeStatusReturn> => {
    return this.fetch(
      this.url('RuntimeStatus'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <RuntimeStatus>(_data.status)
        }
      })
    })
  }
  
  getSequenceContext = (headers?: object): Promise<GetSequenceContextReturn> => {
    return this.fetch(
      this.url('GetSequenceContext'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          data: <SequenceContext>(_data.data)
        }
      })
    })
  }
  
  getChainID = (headers?: object): Promise<GetChainIDReturn> => {
    return this.fetch(
      this.url('GetChainID'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          chainID: <number>(_data.chainID)
        }
      })
    })
  }
  
  sendMetaTxn = (args: SendMetaTxnArgs, headers?: object): Promise<SendMetaTxnReturn> => {
    return this.fetch(
      this.url('SendMetaTxn'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status), 
          txnHash: <string>(_data.txnHash)
        }
      })
    })
  }
  
  getMetaTxnNonce = (args: GetMetaTxnNonceArgs, headers?: object): Promise<GetMetaTxnNonceReturn> => {
    return this.fetch(
      this.url('GetMetaTxnNonce'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          nonce: <string>(_data.nonce)
        }
      })
    })
  }
  
  getMetaTxnReceipt = (args: GetMetaTxnReceiptArgs, headers?: object): Promise<GetMetaTxnReceiptReturn> => {
    return this.fetch(
      this.url('GetMetaTxnReceipt'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          receipt: <MetaTxnReceipt>(_data.receipt)
        }
      })
    })
  }
  
  updateMetaTxnGasLimits = (args: UpdateMetaTxnGasLimitsArgs, headers?: object): Promise<UpdateMetaTxnGasLimitsReturn> => {
    return this.fetch(
      this.url('UpdateMetaTxnGasLimits'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          payload: <string>(_data.payload)
        }
      })
    })
  }
  
  feeTokens = (headers?: object): Promise<FeeTokensReturn> => {
    return this.fetch(
      this.url('FeeTokens'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          isFeeRequired: <boolean>(_data.isFeeRequired), 
          tokens: <Array<FeeToken>>(_data.tokens)
        }
      })
    })
  }
  
  getMetaTxnNetworkFeeOptions = (args: GetMetaTxnNetworkFeeOptionsArgs, headers?: object): Promise<GetMetaTxnNetworkFeeOptionsReturn> => {
    return this.fetch(
      this.url('GetMetaTxnNetworkFeeOptions'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          options: <Array<FeeOption>>(_data.options)
        }
      })
    })
  }
  
  metaTxLogList = (args: MetaTxLogListArgs, headers?: object): Promise<MetaTxLogListReturn> => {
    return this.fetch(
      this.url('MetaTxLogList'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          page: <Page>(_data.page), 
          logs: <Array<MetaTxnLog>>(_data.logs)
        }
      })
    })
  }
  
  transactionHistory = (args: TransactionHistoryArgs, headers?: object): Promise<TransactionHistoryReturn> => {
    return this.fetch(
      this.url('TransactionHistory'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          page: <Page>(_data.page), 
          transactions: <Array<Transaction>>(_data.transactions)
        }
      })
    })
  }
  
  sentTransactions = (args: SentTransactionsArgs, headers?: object): Promise<SentTransactionsReturn> => {
    return this.fetch(
      this.url('SentTransactions'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          page: <Page>(_data.page), 
          transactions: <Array<Transaction>>(_data.transactions)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
