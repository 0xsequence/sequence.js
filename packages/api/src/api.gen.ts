/* eslint-disable */
// arcadeum-api v0.3.0 12f4f60c61cbc0af159f1e4bbbe69dab562578ac
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.3.0"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "12f4f60c61cbc0af159f1e4bbbe69dab562578ac"


//
// Types
//
export enum ChainStateProp {
  UNKNOWN = 'UNKNOWN',
  LAST_BLOCK_INDEXED = 'LAST_BLOCK_INDEXED',
  LAST_EVENT_LOG_PROCESSED = 'LAST_EVENT_LOG_PROCESSED'
}

export enum ETHNetwork {
  UNKNOWN = 'UNKNOWN',
  MAINNET = 'MAINNET',
  MORDEN = 'MORDEN',
  ROPSTEN = 'ROPSTEN',
  RINKEBY = 'RINKEBY',
  GOERLI = 'GOERLI',
  KOVAN = 'KOVAN',
  GANACHE = 'GANACHE',
  MATIC = 'MATIC'
}

export enum ContractType {
  UNKNOWN = 'UNKNOWN',
  ERC20_TOKEN = 'ERC20_TOKEN',
  ERC721_TOKEN = 'ERC721_TOKEN',
  ERC1155_TOKEN = 'ERC1155_TOKEN',
  META_ERC20_WRAPPER = 'META_ERC20_WRAPPER',
  NIFTYSWAP = 'NIFTYSWAP',
  BRIDGE = 'BRIDGE'
}

export enum ContractCategory {
  UNKNOWN = 'UNKNOWN',
  COIN = 'COIN',
  COLLECTIBLE = 'COLLECTIBLE'
}

export enum EventLogType {
  UNKNOWN = 'UNKNOWN',
  BLOCK_ADDED = 'BLOCK_ADDED',
  BLOCK_REMOVED = 'BLOCK_REMOVED',
  BLOCK_UPDATED = 'BLOCK_UPDATED',
  TXN_LOG = 'TXN_LOG'
}

export enum ETHTxnStatus {
  UNKNOWN = 'UNKNOWN',
  FAILED = 'FAILED',
  PARTIALLY_FAILED = 'PARTIALLY_FAILED',
  SENT = 'SENT',
  REVERTED = 'REVERTED',
  SUCCESS = 'SUCCESS',
  FINAL = 'FINAL',
  DROPPED = 'DROPPED'
}

export enum OrderType {
  UNKNOWN = 'UNKNOWN',
  BUY = 'BUY',
  SELL = 'SELL'
}

export enum OrderStatus {
  UNKNOWN = 'UNKNOWN',
  FAILED = 'FAILED',
  PENDING = 'PENDING',
  SUCCESS = 'SUCCESS',
  FINAL = 'FINAL'
}

export enum SortOrder {
  DESC = 'DESC',
  ASC = 'ASC'
}

export enum TransferType {
  SEND = 'SEND',
  RECEIVE = 'RECEIVE',
  BRIDGE_DEPOSIT = 'BRIDGE_DEPOSIT',
  BRIDGE_WITHDRAW = 'BRIDGE_WITHDRAW',
  BURN = 'BURN',
  UNKNOWN = 'UNKNOWN'
}

export interface ChainState {
  id: number
  chainID: number
  prop: ChainStateProp
  value: number
  updatedAt: string
  createdAt: string
}

export interface User {
  address: string
  username: string
  
  avatar: string
  bio: string
  location: string
  locale: string
  backup?: boolean
  backupConfirmed?: boolean
  maxInvites?: number
  updatedAt?: string
  createdAt?: string
  
}

export interface WalletBackup {
  accountAddress: string
  secretHash: string
  encryptedWallet: string
  userConfirmed: boolean
  updatedAt?: string
  createdAt?: string
}

export interface Friend {
  id: number
  userAddress: string
  friendAddress: string
  nickname: string
  user?: User
  createdAt?: string
}

export interface InviteResponse {
  code: string
  url: string
  email?: string
  expiresAt?: string
}

export interface InviteCode {
  
  
  usesLeft: number
  ownerAccount?: string
  email?: string
  url: string
  createdAt?: string
  expiresAt?: string
}

export interface InviteCodeAccount {
  
  claimedByUserAddress: string
  claimedAt?: string
}

export interface InviteInfo {
  expiryInHours: number
  max: number
  invites: Array<InviteCode>
}

export interface Contract {
  id: number
  alias: string
  contractAddress: string
  wrappedContractAddress: string
  type: ContractType
  network: ETHNetwork
  bytecodeHash: string
  trackUsersOnly: boolean
  category: ContractCategory
  name: string
  symbol: string
  decimals?: number
  logoURL: string
  website: string
  description: string
  ogImageURL: string
  originChainId: number
  originAddress: string
  hasMetadata?: boolean
  updatedAt: string
  createdAt: string
}

export interface Token {
  id: number
  contractID: number
  tokenID: string
  uri: string
  metadata: {[key: string]: any}
}

export interface TokenMetadata {
  id: string
  name?: string
  description?: string
  image?: string
  decimals?: number
  properties?: any
}

export interface Balance {
  id: number
  contractAddress: string
  contractAlias: string
  accountAddress: string
  tokenID: string
  amountLatest: string
  amountConfirmed: string
  blockHash: string
  blockHeight: number
  
  tokenMetadata?: TokenMetadata
  updatedAt: string
  createdAt: string
}

export interface EventLog {
  id: number
  ts: string
  chainID: number
  type: EventLogType
  blockNum: number
  blockHash: string
  contractAddress: string
  txnHash: string
  txnIndex: number
  txnLogIndex: number
  data: {[key: string]: any}
}

export interface EtherBalance {
  accountAddress: string
  amountLatestWei: string
  amountConfirmedWei: string
  lastBlockHeight: number
}

export interface Order {
  
  orderID?: string
  txnHash?: string
  txnNonce?: string
  metaTxnID?: string
  txnStatus: ETHTxnStatus
  txnReceipt?: {[key: string]: any}
  txnRevertReason: string
  accountAddress: string
  shopContractAddress: string
  assetContractAddress: string
  baseContractAddress: string
  orderType: OrderType
  orderStatus: OrderStatus
  tokenIds: Array<string>
  amounts: Array<string>
  unitPrices: Array<string>
  subtotalPrice: string
  metatxFee: string
  brokerFee: string
  totalPrice: string
  gasUsed: number
  gasFeeWei: string
  updatedAt: string
  createdAt: string
}

export interface MetaTxLog {
  id: number
  txnHash?: string
  txnNonce?: string
  metaTxnID?: string
  txnStatus: ETHTxnStatus
  txnRevertReason: string
  txnArgs: {[key: string]: any}
  txnReceipt?: {[key: string]: any}
  gasLimit: number
  gasPrice: string
  gasUsed: number
  updatedAt: string
  createdAt: string
}

export interface MetaTxEntry {
  id: number
  metaTxnID: string
  txnStatus: ETHTxnStatus
  txnRevertReason: string
  index: number
  logs?: Array<any>
  updatedAt: string
  createdAt: string
}

export interface Requirement {
  app: string
  version: string
  etc: {[key: string]: string}
}

export interface Version {
  webrpcVersion: string
  schemaVersion: string
  schemaHash: string
  appVersion: string
}

export interface Page {
  pageSize?: number
  page?: number
  totalRecords?: number
  column?: string
  before?: any
  after?: any
  sort?: Array<SortBy>
}

export interface SortBy {
  column: string
  order: SortOrder
}

export interface GasReceipt {
  gasFee: string
  gasLimit: Array<string>
}

export interface MetaTxn {
  contract: string
  input: string
  digest?: string
}

export interface TxnObj {
  to: string
  objs: Array<TxnObj>
  txnStatus: string
  txnRevertReason: string
  logs?: Array<any>
}

export interface MetaTxnReceipt {
  id: string
  status: string
  revertReason: string
  gasUsed: number
  txnReceipt: string
  batch: TxnObj
}

export interface SmartWalletContext {
  factory: string
  module: string
  guestModule: string
}

export interface TokenTransfer {
  recipientAddress: string
  tokenID: string
  tokenAmount: string
}

export interface GetNiftyswapUnitPricesRequest {
  orderType: OrderType
  ids: Array<string>
  amounts: Array<string>
}

export interface RegisterContractRequest {
  type: ContractType
  contractAddress: string
  contractAlias: string
  network: ETHNetwork
  name: string
  symbol: string
  logoURL: string
  website: string
  description: string
  ogImageURL: string
  originChainId: number
  originAddress: string
  category: ContractCategory
  decimals?: number
}

export interface Transaction {
  txnHash?: string
  blockNumber: number
  chainId: number
  metaTxnID?: string
  transfers?: Array<TxnLogTransfer>
  entries?: TxnObj
  users?: {[key: string]: TxnLogUser}
  contracts?: {[key: string]: Contract}
  tokenMetadata?: {[key: string]: {[key: string]: TokenMetadata}}
  timestamp: string
}

export interface TxnLogTransfer {
  transferType: TransferType
  contractAddress: string
  from: string
  to: string
  ids: Array<string>
  amounts: Array<string>
}

export interface TxnLogUser {
  username: string
}

export interface TokenBalance {
  contractAddress: string
  contractAlias: string
  logoURL: string
  originChainId: number
  originAddress: string
  website: string
  contractType: ContractType
  name: string
  symbol: string
  category: ContractCategory
  decimals?: number
  amountLatest: string
  amountConfirmed: string
}

export interface MetaTxSigner {
  address: string
  weight: number
}

export interface MetaTxSig {
  address: string
  signature: string
  digest?: string
}

export interface WalletConfigImage {
  imageHash: string
  threshold: number
  signers: Array<MetaTxSigner>
}

export interface WalletImage {
  walletAddress: string
  imageHash: string
}

export interface TransactionHistoryFilter {
  users?: Array<string>
  contractHandles?: Array<string>
  transactionHashes?: Array<string>
  fromBlock?: number
  toBlock?: number
}

export interface SentTransactionsFilter {
  pending: boolean
  failed: boolean
}

export interface TxnData {
  to: string
  methodName: string
  args: {[key: string]: any}
  objs: Array<TxnData>
}

export interface ArcadeumAPI {
  getAuthToken(args: GetAuthTokenArgs, headers?: object): Promise<GetAuthTokenReturn>
  getSession(headers?: object): Promise<GetSessionReturn>
  internalClaimAccessCode(args: InternalClaimAccessCodeArgs, headers?: object): Promise<InternalClaimAccessCodeReturn>
  walletRecover(args: WalletRecoverArgs, headers?: object): Promise<WalletRecoverReturn>
  friendList(args: FriendListArgs, headers?: object): Promise<FriendListReturn>
  getFriendByAddress(args: GetFriendByAddressArgs, headers?: object): Promise<GetFriendByAddressReturn>
  searchFriends(args: SearchFriendsArgs, headers?: object): Promise<SearchFriendsReturn>
  addFriend(args: AddFriendArgs, headers?: object): Promise<AddFriendReturn>
  updateFriendNickname(args: UpdateFriendNicknameArgs, headers?: object): Promise<UpdateFriendNicknameReturn>
  removeFriend(args: RemoveFriendArgs, headers?: object): Promise<RemoveFriendReturn>
  getContract(args: GetContractArgs, headers?: object): Promise<GetContractReturn>
  getContractByAlias(args: GetContractByAliasArgs, headers?: object): Promise<GetContractByAliasReturn>
  getTokenContractsWithBalances(headers?: object): Promise<GetTokenContractsWithBalancesReturn>
  getTokenBalances(headers?: object): Promise<GetTokenBalancesReturn>
  metaTxLogList(args: MetaTxLogListArgs, headers?: object): Promise<MetaTxLogListReturn>
  transactionHistory(args: TransactionHistoryArgs, headers?: object): Promise<TransactionHistoryReturn>
  sentTransactions(args: SentTransactionsArgs, headers?: object): Promise<SentTransactionsReturn>
  accountEtherBalance(args: AccountEtherBalanceArgs, headers?: object): Promise<AccountEtherBalanceReturn>
  getAccountBalances(args: GetAccountBalancesArgs, headers?: object): Promise<GetAccountBalancesReturn>
  getBalanceUpdates(args: GetBalanceUpdatesArgs, headers?: object): Promise<GetBalanceUpdatesReturn>
  getTokenMetadata(args: GetTokenMetadataArgs, headers?: object): Promise<GetTokenMetadataReturn>
  decodeTxnData(args: DecodeTxnDataArgs, headers?: object): Promise<DecodeTxnDataReturn>
  getNiftyswapTokenSupply(args: GetNiftyswapTokenSupplyArgs, headers?: object): Promise<GetNiftyswapTokenSupplyReturn>
  getNiftyswapUnitPrices(args: GetNiftyswapUnitPricesArgs, headers?: object): Promise<GetNiftyswapUnitPricesReturn>
  sendMetaTxn(args: SendMetaTxnArgs, headers?: object): Promise<SendMetaTxnReturn>
  getMetaTxnNonce(args: GetMetaTxnNonceArgs, headers?: object): Promise<GetMetaTxnNonceReturn>
  getSmartWalletContext(headers?: object): Promise<GetSmartWalletContextReturn>
  getMetaTxnReceipt(args: GetMetaTxnReceiptArgs, headers?: object): Promise<GetMetaTxnReceiptReturn>
  getChainID(headers?: object): Promise<GetChainIDReturn>
  tokenFee(headers?: object): Promise<TokenFeeReturn>
  updateMetaTxnGasLimits(args: UpdateMetaTxnGasLimitsArgs, headers?: object): Promise<UpdateMetaTxnGasLimitsReturn>
  getMetaTxnNetworkFeeOptions(args: GetMetaTxnNetworkFeeOptionsArgs, headers?: object): Promise<GetMetaTxnNetworkFeeOptionsReturn>
  getInviteInfo(headers?: object): Promise<GetInviteInfoReturn>
  ping(headers?: object): Promise<PingReturn>
  version(headers?: object): Promise<VersionReturn>
  requirements(headers?: object): Promise<RequirementsReturn>
}

export interface GetAuthTokenArgs {
  ewtString: string
}

export interface GetAuthTokenReturn {
  status: boolean
  jwtToken: string
  address: string
  user?: User  
}
export interface GetSessionArgs {
}

export interface GetSessionReturn {
  address: string
  user?: User  
}
export interface InternalClaimAccessCodeArgs {
  address: string
  accessCode: string
}

export interface InternalClaimAccessCodeReturn {
  status: boolean  
}
export interface WalletRecoverArgs {
  username: string
  secretHash: string
}

export interface WalletRecoverReturn {
  encryptedWallet: string  
}
export interface FriendListArgs {
  page?: Page
}

export interface FriendListReturn {
  page: Page
  friends: Array<Friend>  
}
export interface GetFriendByAddressArgs {
  friendAddress: string
}

export interface GetFriendByAddressReturn {
  status: boolean
  friend: Friend  
}
export interface SearchFriendsArgs {
  filterUsername: string
}

export interface SearchFriendsReturn {
  friends: Array<Friend>  
}
export interface AddFriendArgs {
  friendAddress: string
  optionalNickname?: string
}

export interface AddFriendReturn {
  status: boolean
  friend?: Friend  
}
export interface UpdateFriendNicknameArgs {
  friendAddress: string
  nickname: string
}

export interface UpdateFriendNicknameReturn {
  status: boolean
  friend?: Friend  
}
export interface RemoveFriendArgs {
  friendAddress: string
}

export interface RemoveFriendReturn {
  status: boolean  
}
export interface GetContractArgs {
  contractHandle: string
}

export interface GetContractReturn {
  contract: Contract  
}
export interface GetContractByAliasArgs {
  alias: string
}

export interface GetContractByAliasReturn {
  contract: Contract  
}
export interface GetTokenContractsWithBalancesArgs {
}

export interface GetTokenContractsWithBalancesReturn {
  contracts: Array<Contract>  
}
export interface GetTokenBalancesArgs {
}

export interface GetTokenBalancesReturn {
  balances: Array<TokenBalance>  
}
export interface MetaTxLogListArgs {
  page?: Page
}

export interface MetaTxLogListReturn {
  page: Page
  logs: Array<MetaTxLog>  
}
export interface TransactionHistoryArgs {
  filter: TransactionHistoryFilter
  page?: Page
}

export interface TransactionHistoryReturn {
  page: Page
  transactions: Array<Transaction>  
}
export interface SentTransactionsArgs {
  filter: SentTransactionsFilter
  page?: Page
}

export interface SentTransactionsReturn {
  page: Page
  transactions: Array<Transaction>  
}
export interface AccountEtherBalanceArgs {
  accountAddress: string
}

export interface AccountEtherBalanceReturn {
  balance: EtherBalance  
}
export interface GetAccountBalancesArgs {
  contractHandle: string
  accountAddress: string
  includeMetadata?: boolean
}

export interface GetAccountBalancesReturn {
  status: boolean
  balances: Array<Balance>  
}
export interface GetBalanceUpdatesArgs {
  contractHandle: string
  lastBalanceID: number
  page?: Page
}

export interface GetBalanceUpdatesReturn {
  page?: Page
  balances: Array<Balance>  
}
export interface GetTokenMetadataArgs {
  contractHandle: string
  tokenIDs: Array<string>
}

export interface GetTokenMetadataReturn {
  tokenMetadata: Array<TokenMetadata>  
}
export interface DecodeTxnDataArgs {
  input: string
}

export interface DecodeTxnDataReturn {
  res: TxnData  
}
export interface GetNiftyswapTokenSupplyArgs {
  shopContractHandle: string
  ids: Array<string>
}

export interface GetNiftyswapTokenSupplyReturn {
  amounts: Array<string>  
}
export interface GetNiftyswapUnitPricesArgs {
  shopContractHandle: string
  req: GetNiftyswapUnitPricesRequest
}

export interface GetNiftyswapUnitPricesReturn {
  prices: Array<string>  
}
export interface SendMetaTxnArgs {
  call: MetaTxn
}

export interface SendMetaTxnReturn {
  status: boolean
  txnHash: string  
}
export interface GetMetaTxnNonceArgs {
  walletContractAddress: string
  space?: string
}

export interface GetMetaTxnNonceReturn {
  nonce: string  
}
export interface GetSmartWalletContextArgs {
}

export interface GetSmartWalletContextReturn {
  data: SmartWalletContext  
}
export interface GetMetaTxnReceiptArgs {
  metaTxID: string
}

export interface GetMetaTxnReceiptReturn {
  receipt: MetaTxnReceipt  
}
export interface GetChainIDArgs {
}

export interface GetChainIDReturn {
  chainID: number  
}
export interface TokenFeeArgs {
}

export interface TokenFeeReturn {
  isFee: boolean
  fee: string  
}
export interface UpdateMetaTxnGasLimitsArgs {
  walletAddress: string
  payload: string
}

export interface UpdateMetaTxnGasLimitsReturn {
  payload: string  
}
export interface GetMetaTxnNetworkFeeOptionsArgs {
  walletAddress: string
  payload: string
  signers: number
}

export interface GetMetaTxnNetworkFeeOptionsReturn {
  options: Array<string>  
}
export interface GetInviteInfoArgs {
}

export interface GetInviteInfoReturn {
  inviteInfo: InviteInfo  
}
export interface PingArgs {
}

export interface PingReturn {
  status: boolean  
}
export interface VersionArgs {
}

export interface VersionReturn {
  version: Version  
}
export interface RequirementsArgs {
}

export interface RequirementsReturn {
  reqs: Array<Requirement>  
}


  
//
// Client
//
export class ArcadeumAPI implements ArcadeumAPI {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/ArcadeumAPI/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  getAuthToken = (args: GetAuthTokenArgs, headers?: object): Promise<GetAuthTokenReturn> => {
    return this.fetch(
      this.url('GetAuthToken'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status), 
          jwtToken: <string>(_data.jwtToken), 
          address: <string>(_data.address), 
          user: <User>(_data.user)
        }
      })
    })
  }
  
  getSession = (headers?: object): Promise<GetSessionReturn> => {
    return this.fetch(
      this.url('GetSession'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          address: <string>(_data.address), 
          user: <User>(_data.user)
        }
      })
    })
  }
  
  internalClaimAccessCode = (args: InternalClaimAccessCodeArgs, headers?: object): Promise<InternalClaimAccessCodeReturn> => {
    return this.fetch(
      this.url('InternalClaimAccessCode'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status)
        }
      })
    })
  }
  
  walletRecover = (args: WalletRecoverArgs, headers?: object): Promise<WalletRecoverReturn> => {
    return this.fetch(
      this.url('WalletRecover'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          encryptedWallet: <string>(_data.encryptedWallet)
        }
      })
    })
  }
  
  friendList = (args: FriendListArgs, headers?: object): Promise<FriendListReturn> => {
    return this.fetch(
      this.url('FriendList'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          page: <Page>(_data.page), 
          friends: <Array<Friend>>(_data.friends)
        }
      })
    })
  }
  
  getFriendByAddress = (args: GetFriendByAddressArgs, headers?: object): Promise<GetFriendByAddressReturn> => {
    return this.fetch(
      this.url('GetFriendByAddress'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status), 
          friend: <Friend>(_data.friend)
        }
      })
    })
  }
  
  searchFriends = (args: SearchFriendsArgs, headers?: object): Promise<SearchFriendsReturn> => {
    return this.fetch(
      this.url('SearchFriends'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          friends: <Array<Friend>>(_data.friends)
        }
      })
    })
  }
  
  addFriend = (args: AddFriendArgs, headers?: object): Promise<AddFriendReturn> => {
    return this.fetch(
      this.url('AddFriend'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status), 
          friend: <Friend>(_data.friend)
        }
      })
    })
  }
  
  updateFriendNickname = (args: UpdateFriendNicknameArgs, headers?: object): Promise<UpdateFriendNicknameReturn> => {
    return this.fetch(
      this.url('UpdateFriendNickname'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status), 
          friend: <Friend>(_data.friend)
        }
      })
    })
  }
  
  removeFriend = (args: RemoveFriendArgs, headers?: object): Promise<RemoveFriendReturn> => {
    return this.fetch(
      this.url('RemoveFriend'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status)
        }
      })
    })
  }
  
  getContract = (args: GetContractArgs, headers?: object): Promise<GetContractReturn> => {
    return this.fetch(
      this.url('GetContract'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          contract: <Contract>(_data.contract)
        }
      })
    })
  }
  
  getContractByAlias = (args: GetContractByAliasArgs, headers?: object): Promise<GetContractByAliasReturn> => {
    return this.fetch(
      this.url('GetContractByAlias'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          contract: <Contract>(_data.contract)
        }
      })
    })
  }
  
  getTokenContractsWithBalances = (headers?: object): Promise<GetTokenContractsWithBalancesReturn> => {
    return this.fetch(
      this.url('GetTokenContractsWithBalances'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          contracts: <Array<Contract>>(_data.contracts)
        }
      })
    })
  }
  
  getTokenBalances = (headers?: object): Promise<GetTokenBalancesReturn> => {
    return this.fetch(
      this.url('GetTokenBalances'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          balances: <Array<TokenBalance>>(_data.balances)
        }
      })
    })
  }
  
  metaTxLogList = (args: MetaTxLogListArgs, headers?: object): Promise<MetaTxLogListReturn> => {
    return this.fetch(
      this.url('MetaTxLogList'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          page: <Page>(_data.page), 
          logs: <Array<MetaTxLog>>(_data.logs)
        }
      })
    })
  }
  
  transactionHistory = (args: TransactionHistoryArgs, headers?: object): Promise<TransactionHistoryReturn> => {
    return this.fetch(
      this.url('TransactionHistory'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          page: <Page>(_data.page), 
          transactions: <Array<Transaction>>(_data.transactions)
        }
      })
    })
  }
  
  sentTransactions = (args: SentTransactionsArgs, headers?: object): Promise<SentTransactionsReturn> => {
    return this.fetch(
      this.url('SentTransactions'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          page: <Page>(_data.page), 
          transactions: <Array<Transaction>>(_data.transactions)
        }
      })
    })
  }
  
  accountEtherBalance = (args: AccountEtherBalanceArgs, headers?: object): Promise<AccountEtherBalanceReturn> => {
    return this.fetch(
      this.url('AccountEtherBalance'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          balance: <EtherBalance>(_data.balance)
        }
      })
    })
  }
  
  getAccountBalances = (args: GetAccountBalancesArgs, headers?: object): Promise<GetAccountBalancesReturn> => {
    return this.fetch(
      this.url('GetAccountBalances'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status), 
          balances: <Array<Balance>>(_data.balances)
        }
      })
    })
  }
  
  getBalanceUpdates = (args: GetBalanceUpdatesArgs, headers?: object): Promise<GetBalanceUpdatesReturn> => {
    return this.fetch(
      this.url('GetBalanceUpdates'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          page: <Page>(_data.page), 
          balances: <Array<Balance>>(_data.balances)
        }
      })
    })
  }
  
  getTokenMetadata = (args: GetTokenMetadataArgs, headers?: object): Promise<GetTokenMetadataReturn> => {
    return this.fetch(
      this.url('GetTokenMetadata'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          tokenMetadata: <Array<TokenMetadata>>(_data.tokenMetadata)
        }
      })
    })
  }
  
  decodeTxnData = (args: DecodeTxnDataArgs, headers?: object): Promise<DecodeTxnDataReturn> => {
    return this.fetch(
      this.url('DecodeTxnData'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          res: <TxnData>(_data.res)
        }
      })
    })
  }
  
  getNiftyswapTokenSupply = (args: GetNiftyswapTokenSupplyArgs, headers?: object): Promise<GetNiftyswapTokenSupplyReturn> => {
    return this.fetch(
      this.url('GetNiftyswapTokenSupply'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          amounts: <Array<string>>(_data.amounts)
        }
      })
    })
  }
  
  getNiftyswapUnitPrices = (args: GetNiftyswapUnitPricesArgs, headers?: object): Promise<GetNiftyswapUnitPricesReturn> => {
    return this.fetch(
      this.url('GetNiftyswapUnitPrices'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          prices: <Array<string>>(_data.prices)
        }
      })
    })
  }
  
  sendMetaTxn = (args: SendMetaTxnArgs, headers?: object): Promise<SendMetaTxnReturn> => {
    return this.fetch(
      this.url('SendMetaTxn'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status), 
          txnHash: <string>(_data.txnHash)
        }
      })
    })
  }
  
  getMetaTxnNonce = (args: GetMetaTxnNonceArgs, headers?: object): Promise<GetMetaTxnNonceReturn> => {
    return this.fetch(
      this.url('GetMetaTxnNonce'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          nonce: <string>(_data.nonce)
        }
      })
    })
  }
  
  getSmartWalletContext = (headers?: object): Promise<GetSmartWalletContextReturn> => {
    return this.fetch(
      this.url('GetSmartWalletContext'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          data: <SmartWalletContext>(_data.data)
        }
      })
    })
  }
  
  getMetaTxnReceipt = (args: GetMetaTxnReceiptArgs, headers?: object): Promise<GetMetaTxnReceiptReturn> => {
    return this.fetch(
      this.url('GetMetaTxnReceipt'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          receipt: <MetaTxnReceipt>(_data.receipt)
        }
      })
    })
  }
  
  getChainID = (headers?: object): Promise<GetChainIDReturn> => {
    return this.fetch(
      this.url('GetChainID'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          chainID: <number>(_data.chainID)
        }
      })
    })
  }
  
  tokenFee = (headers?: object): Promise<TokenFeeReturn> => {
    return this.fetch(
      this.url('TokenFee'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          isFee: <boolean>(_data.isFee), 
          fee: <string>(_data.fee)
        }
      })
    })
  }
  
  updateMetaTxnGasLimits = (args: UpdateMetaTxnGasLimitsArgs, headers?: object): Promise<UpdateMetaTxnGasLimitsReturn> => {
    return this.fetch(
      this.url('UpdateMetaTxnGasLimits'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          payload: <string>(_data.payload)
        }
      })
    })
  }
  
  getMetaTxnNetworkFeeOptions = (args: GetMetaTxnNetworkFeeOptionsArgs, headers?: object): Promise<GetMetaTxnNetworkFeeOptionsReturn> => {
    return this.fetch(
      this.url('GetMetaTxnNetworkFeeOptions'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          options: <Array<string>>(_data.options)
        }
      })
    })
  }
  
  getInviteInfo = (headers?: object): Promise<GetInviteInfoReturn> => {
    return this.fetch(
      this.url('GetInviteInfo'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          inviteInfo: <InviteInfo>(_data.inviteInfo)
        }
      })
    })
  }
  
  ping = (headers?: object): Promise<PingReturn> => {
    return this.fetch(
      this.url('Ping'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status)
        }
      })
    })
  }
  
  version = (headers?: object): Promise<VersionReturn> => {
    return this.fetch(
      this.url('Version'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          version: <Version>(_data.version)
        }
      })
    })
  }
  
  requirements = (headers?: object): Promise<RequirementsReturn> => {
    return this.fetch(
      this.url('Requirements'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          reqs: <Array<Requirement>>(_data.reqs)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
