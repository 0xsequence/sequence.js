/* eslint-disable */
// guardd v0.1.0 8d4d548d0af400f36ef39a21c29927fe65f9396c
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.1.0"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "8d4d548d0af400f36ef39a21c29927fe65f9396c"


//
// Types
//
export interface Request {
  chainId: number
  msg: string
  auxData: string
}

export interface GuarddService {
  sign(args: SignArgs, headers?: object): Promise<SignReturn>
}

export interface SignArgs {
  request: Request
}

export interface SignReturn {
  sig: string  
}


  
//
// Client
//
export class GuarddService implements GuarddService {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/GuarddService/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  sign = (args: SignArgs, headers?: object): Promise<SignReturn> => {
    return this.fetch(
      this.url('Sign'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          sig: <string>(_data.sig)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
