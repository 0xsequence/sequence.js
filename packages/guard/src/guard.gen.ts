/* eslint-disable */
// sequence-guard v0.4.0 2e5d6a4c9b797598078365d7439f330bc7bbf29c
// --
// Code generated by webrpc-gen@v0.12.x-dev with typescript@v0.10.0 generator. DO NOT EDIT.
//
// webrpc-gen -schema=guard.ridl -target=typescript@v0.10.0 -client -out=./clients/guard.gen.ts

// WebRPC description and code-gen version
export const WebRPCVersion = 'v1'

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = 'v0.4.0'

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = '2e5d6a4c9b797598078365d7439f330bc7bbf29c'

//
// Types
//

export interface Version {
  webrpcVersion: string
  schemaVersion: string
  schemaHash: string
  appVersion: string
}

export interface RuntimeStatus {
  healthOK: boolean
  startTime: string
  uptime: number
  ver: string
  branch: string
  commitHash: string
}

export interface WalletConfig {
  address: string
  content: string
}

export interface WalletSigner {
  address: string
  weight: number
}

export interface SignRequest {
  chainId: number
  msg: string
  auxData: string
}

export interface OwnershipProof {
  wallet: string
  timestamp: number
  signer: string
  signature: string
}

export interface AuthToken {
  id: string
  token: string
}

export interface RecoveryCode {
  code: string
  used: boolean
}

export interface Guard {
  ping(headers?: object): Promise<PingReturn>
  version(headers?: object): Promise<VersionReturn>
  runtimeStatus(headers?: object): Promise<RuntimeStatusReturn>
  getSignerConfig(args: GetSignerConfigArgs, headers?: object): Promise<GetSignerConfigReturn>
  sign(args: SignArgs, headers?: object): Promise<SignReturn>
  signWith(args: SignWithArgs, headers?: object): Promise<SignWithReturn>
  authMethods(args: AuthMethodsArgs, headers?: object): Promise<AuthMethodsReturn>
  setPIN(args: SetPINArgs, headers?: object): Promise<SetPINReturn>
  resetPIN(args: ResetPINArgs, headers?: object): Promise<ResetPINReturn>
  createTOTP(args: CreateTOTPArgs, headers?: object): Promise<CreateTOTPReturn>
  commitTOTP(args: CommitTOTPArgs, headers?: object): Promise<CommitTOTPReturn>
  resetTOTP(args: ResetTOTPArgs, headers?: object): Promise<ResetTOTPReturn>
  reset2FA(args: Reset2FAArgs, headers?: object): Promise<Reset2FAReturn>
  recoveryCodes(args: RecoveryCodesArgs, headers?: object): Promise<RecoveryCodesReturn>
  resetRecoveryCodes(args: ResetRecoveryCodesArgs, headers?: object): Promise<ResetRecoveryCodesReturn>
}

export interface PingArgs {}

export interface PingReturn {
  status: boolean
}
export interface VersionArgs {}

export interface VersionReturn {
  version: Version
}
export interface RuntimeStatusArgs {}

export interface RuntimeStatusReturn {
  status: RuntimeStatus
}
export interface GetSignerConfigArgs {
  signer: string
}

export interface GetSignerConfigReturn {
  signerConfig: WalletConfig
}
export interface SignArgs {
  request: SignRequest
  token?: AuthToken
}

export interface SignReturn {
  sig: string
}
export interface SignWithArgs {
  signer: string
  request: SignRequest
  token?: AuthToken
}

export interface SignWithReturn {
  sig: string
}
export interface AuthMethodsArgs {
  proof?: OwnershipProof
}

export interface AuthMethodsReturn {
  methods: Array<string>
  active: boolean
}
export interface SetPINArgs {
  pin: string
  timestamp: number
  signature: string
}

export interface SetPINReturn {}
export interface ResetPINArgs {
  timestamp: number
  signature: string
}

export interface ResetPINReturn {}
export interface CreateTOTPArgs {
  timestamp: number
  signature: string
}

export interface CreateTOTPReturn {
  uri: string
}
export interface CommitTOTPArgs {
  token: string
}

export interface CommitTOTPReturn {
  codes: Array<RecoveryCode>
}
export interface ResetTOTPArgs {
  timestamp: number
  signature: string
}

export interface ResetTOTPReturn {}
export interface Reset2FAArgs {
  code: string
  proof?: OwnershipProof
}

export interface Reset2FAReturn {}
export interface RecoveryCodesArgs {
  timestamp: number
  signature: string
}

export interface RecoveryCodesReturn {
  codes: Array<RecoveryCode>
}
export interface ResetRecoveryCodesArgs {
  timestamp: number
  signature: string
}

export interface ResetRecoveryCodesReturn {
  codes: Array<RecoveryCode>
}

//
// Client
//
export class Guard implements Guard {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/Guard/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }

  ping = (headers?: object): Promise<PingReturn> => {
    return this.fetch(this.url('Ping'), createHTTPRequest({}, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>_data.status
        }
      })
    })
  }

  version = (headers?: object): Promise<VersionReturn> => {
    return this.fetch(this.url('Version'), createHTTPRequest({}, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {
          version: <Version>_data.version
        }
      })
    })
  }

  runtimeStatus = (headers?: object): Promise<RuntimeStatusReturn> => {
    return this.fetch(this.url('RuntimeStatus'), createHTTPRequest({}, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {
          status: <RuntimeStatus>_data.status
        }
      })
    })
  }

  getSignerConfig = (args: GetSignerConfigArgs, headers?: object): Promise<GetSignerConfigReturn> => {
    return this.fetch(this.url('GetSignerConfig'), createHTTPRequest(args, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {
          signerConfig: <WalletConfig>_data.signerConfig
        }
      })
    })
  }

  sign = (args: SignArgs, headers?: object): Promise<SignReturn> => {
    return this.fetch(this.url('Sign'), createHTTPRequest(args, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {
          sig: <string>_data.sig
        }
      })
    })
  }

  signWith = (args: SignWithArgs, headers?: object): Promise<SignWithReturn> => {
    return this.fetch(this.url('SignWith'), createHTTPRequest(args, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {
          sig: <string>_data.sig
        }
      })
    })
  }

  authMethods = (args: AuthMethodsArgs, headers?: object): Promise<AuthMethodsReturn> => {
    return this.fetch(this.url('AuthMethods'), createHTTPRequest(args, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {
          methods: <Array<string>>_data.methods,
          active: <boolean>_data.active
        }
      })
    })
  }

  setPIN = (args: SetPINArgs, headers?: object): Promise<SetPINReturn> => {
    return this.fetch(this.url('SetPIN'), createHTTPRequest(args, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {}
      })
    })
  }

  resetPIN = (args: ResetPINArgs, headers?: object): Promise<ResetPINReturn> => {
    return this.fetch(this.url('ResetPIN'), createHTTPRequest(args, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {}
      })
    })
  }

  createTOTP = (args: CreateTOTPArgs, headers?: object): Promise<CreateTOTPReturn> => {
    return this.fetch(this.url('CreateTOTP'), createHTTPRequest(args, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {
          uri: <string>_data.uri
        }
      })
    })
  }

  commitTOTP = (args: CommitTOTPArgs, headers?: object): Promise<CommitTOTPReturn> => {
    return this.fetch(this.url('CommitTOTP'), createHTTPRequest(args, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {
          codes: <Array<RecoveryCode>>_data.codes
        }
      })
    })
  }

  resetTOTP = (args: ResetTOTPArgs, headers?: object): Promise<ResetTOTPReturn> => {
    return this.fetch(this.url('ResetTOTP'), createHTTPRequest(args, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {}
      })
    })
  }

  reset2FA = (args: Reset2FAArgs, headers?: object): Promise<Reset2FAReturn> => {
    return this.fetch(this.url('Reset2FA'), createHTTPRequest(args, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {}
      })
    })
  }

  recoveryCodes = (args: RecoveryCodesArgs, headers?: object): Promise<RecoveryCodesReturn> => {
    return this.fetch(this.url('RecoveryCodes'), createHTTPRequest(args, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {
          codes: <Array<RecoveryCode>>_data.codes
        }
      })
    })
  }

  resetRecoveryCodes = (args: ResetRecoveryCodesArgs, headers?: object): Promise<ResetRecoveryCodesReturn> => {
    return this.fetch(this.url('ResetRecoveryCodes'), createHTTPRequest(args, headers)).then(res => {
      return buildResponse(res).then(_data => {
        return {
          codes: <Array<RecoveryCode>>_data.codes
        }
      })
    })
  }
}

export interface WebRPCError extends Error {
  code: string
  msg: string
  status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch (err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
