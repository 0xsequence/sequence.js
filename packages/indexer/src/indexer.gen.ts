/* eslint-disable */
// sequence-indexer v0.4.0 b28e21f760142ef4202c113fcc5c9572a31cfeaf
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.4.0"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "b28e21f760142ef4202c113fcc5c9572a31cfeaf"


//
// Types
//
export enum ContractType {
  UNKNOWN = 'UNKNOWN',
  ERC20 = 'ERC20',
  ERC721 = 'ERC721',
  ERC1155 = 'ERC1155',
  SEQUENCE_WALLET = 'SEQUENCE_WALLET'
}

export enum EventLogType {
  UNKNOWN = 'UNKNOWN',
  BLOCK_ADDED = 'BLOCK_ADDED',
  BLOCK_REMOVED = 'BLOCK_REMOVED'
}

export enum EventLogDataType {
  UNKNOWN = 'UNKNOWN',
  TOKEN_TRANSFER = 'TOKEN_TRANSFER',
  SEQUENCE_TXN = 'SEQUENCE_TXN'
}

export enum TxnTransferType {
  UNKNOWN = 'UNKNOWN',
  SEND = 'SEND',
  RECEIVE = 'RECEIVE'
}

export enum SortOrder {
  DESC = 'DESC',
  ASC = 'ASC'
}

export interface Version {
  webrpcVersion: string
  schemaVersion: string
  schemaHash: string
  appVersion: string
}

export interface RuntimeStatus {
  healthOK: boolean
  indexerEnabled: boolean
  startTime: string
  uptime: number
  ver: string
  branch: string
  commitHash: string
  chainID: number
  checks: RuntimeChecks
}

export interface RuntimeChecks {
  running: boolean
  syncMode: string
  lastBlockNum: number
}

export interface EtherBalance {
  accountAddress: string
  balanceWei: string
}

export interface IndexState {
  chainId: string
  lastBlockNum: number
}

export interface EventLog {
  id: number
  type: EventLogType
  blockNumber: number
  blockHash: string
  contractAddress: string
  contractType: ContractType
  txnHash: string
  txnIndex: number
  txnLogIndex: number
  logDataType: EventLogDataType
  ts: string
  logData: string
}

export interface TokenBalance {
  id: number
  
  contractAddress: string
  contractType: ContractType
  accountAddress: string
  tokenID: string
  balance: string
  blockHash: string
  blockNumber: number
  updateId: number
  chainId: number
}

export interface TokenHistory {
  id: number
  blockNumber: number
  blockHash: string
  contractAddress: string
  contractType: ContractType
  fromAddress: string
  toAddress: string
  txnHash: string
  txnIndex: number
  txnLogIndex: number
  logData: string
  ts: string
}

export interface TokenSupply {
  tokenID: string
  supply: string
  chainId: number
}

export interface Transaction {
  txnHash: string
  blockNumber: number
  blockHash: string
  chainId: number
  metaTxnID?: string
  transfers?: Array<TxnTransfer>
  timestamp: string
}

export interface TxnTransfer {
  transferType: TxnTransferType
  contractAddress: string
  contractType: ContractType
  from: string
  to: string
  tokenIds?: Array<string>
  amounts: Array<string>
}

export interface TransactionHistoryFilter {
  accountAddresses?: Array<string>
  contractAddresses?: Array<string>
  transactionHashes?: Array<string>
  metaTransactionIDs?: Array<string>
  fromBlock?: number
  toBlock?: number
}

export interface Page {
  pageSize?: number
  page?: number
  more?: boolean
  column?: string
  before?: any
  after?: any
  sort?: Array<SortBy>
}

export interface SortBy {
  column: string
  order: SortOrder
}

export interface Indexer {
  ping(headers?: object): Promise<PingReturn>
  version(headers?: object): Promise<VersionReturn>
  runtimeStatus(headers?: object): Promise<RuntimeStatusReturn>
  getChainID(headers?: object): Promise<GetChainIDReturn>
  getEtherBalance(args: GetEtherBalanceArgs, headers?: object): Promise<GetEtherBalanceReturn>
  getTokenBalances(args: GetTokenBalancesArgs, headers?: object): Promise<GetTokenBalancesReturn>
  getTokenSupplies(args: GetTokenSuppliesArgs, headers?: object): Promise<GetTokenSuppliesReturn>
  getTokenSuppliesMap(args: GetTokenSuppliesMapArgs, headers?: object): Promise<GetTokenSuppliesMapReturn>
  getBalanceUpdates(args: GetBalanceUpdatesArgs, headers?: object): Promise<GetBalanceUpdatesReturn>
  getTransactionHistory(args: GetTransactionHistoryArgs, headers?: object): Promise<GetTransactionHistoryReturn>
}

export interface PingArgs {
}

export interface PingReturn {
  status: boolean  
}
export interface VersionArgs {
}

export interface VersionReturn {
  version: Version  
}
export interface RuntimeStatusArgs {
}

export interface RuntimeStatusReturn {
  status: RuntimeStatus  
}
export interface GetChainIDArgs {
}

export interface GetChainIDReturn {
  chainID: number  
}
export interface GetEtherBalanceArgs {
  accountAddress?: string
}

export interface GetEtherBalanceReturn {
  balance: EtherBalance  
}
export interface GetTokenBalancesArgs {
  accountAddress?: string
  contractAddress?: string
}

export interface GetTokenBalancesReturn {
  balances: Array<TokenBalance>  
}
export interface GetTokenSuppliesArgs {
  contractAddress: string
}

export interface GetTokenSuppliesReturn {
  contractType: ContractType
  tokenIDs: Array<TokenSupply>  
}
export interface GetTokenSuppliesMapArgs {
  tokenMap: {[key: string]: Array<string>}
}

export interface GetTokenSuppliesMapReturn {
  supplies: {[key: string]: Array<TokenSupply>}  
}
export interface GetBalanceUpdatesArgs {
  contractAddress: string
  lastUpdateID: number
  page?: Page
}

export interface GetBalanceUpdatesReturn {
  page?: Page
  balances: Array<TokenBalance>  
}
export interface GetTransactionHistoryArgs {
  filter: TransactionHistoryFilter
  page?: Page
}

export interface GetTransactionHistoryReturn {
  page: Page
  transactions: Array<Transaction>  
}


  
//
// Client
//
export class Indexer implements Indexer {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/Indexer/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  ping = (headers?: object): Promise<PingReturn> => {
    return this.fetch(
      this.url('Ping'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status)
        }
      })
    })
  }
  
  version = (headers?: object): Promise<VersionReturn> => {
    return this.fetch(
      this.url('Version'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          version: <Version>(_data.version)
        }
      })
    })
  }
  
  runtimeStatus = (headers?: object): Promise<RuntimeStatusReturn> => {
    return this.fetch(
      this.url('RuntimeStatus'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <RuntimeStatus>(_data.status)
        }
      })
    })
  }
  
  getChainID = (headers?: object): Promise<GetChainIDReturn> => {
    return this.fetch(
      this.url('GetChainID'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          chainID: <number>(_data.chainID)
        }
      })
    })
  }
  
  getEtherBalance = (args: GetEtherBalanceArgs, headers?: object): Promise<GetEtherBalanceReturn> => {
    return this.fetch(
      this.url('GetEtherBalance'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          balance: <EtherBalance>(_data.balance)
        }
      })
    })
  }
  
  getTokenBalances = (args: GetTokenBalancesArgs, headers?: object): Promise<GetTokenBalancesReturn> => {
    return this.fetch(
      this.url('GetTokenBalances'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          balances: <Array<TokenBalance>>(_data.balances)
        }
      })
    })
  }
  
  getTokenSupplies = (args: GetTokenSuppliesArgs, headers?: object): Promise<GetTokenSuppliesReturn> => {
    return this.fetch(
      this.url('GetTokenSupplies'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          contractType: <ContractType>(_data.contractType), 
          tokenIDs: <Array<TokenSupply>>(_data.tokenIDs)
        }
      })
    })
  }
  
  getTokenSuppliesMap = (args: GetTokenSuppliesMapArgs, headers?: object): Promise<GetTokenSuppliesMapReturn> => {
    return this.fetch(
      this.url('GetTokenSuppliesMap'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          supplies: <{[key: string]: Array<TokenSupply>}>(_data.supplies)
        }
      })
    })
  }
  
  getBalanceUpdates = (args: GetBalanceUpdatesArgs, headers?: object): Promise<GetBalanceUpdatesReturn> => {
    return this.fetch(
      this.url('GetBalanceUpdates'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          page: <Page>(_data.page), 
          balances: <Array<TokenBalance>>(_data.balances)
        }
      })
    })
  }
  
  getTransactionHistory = (args: GetTransactionHistoryArgs, headers?: object): Promise<GetTransactionHistoryReturn> => {
    return this.fetch(
      this.url('GetTransactionHistory'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          page: <Page>(_data.page), 
          transactions: <Array<Transaction>>(_data.transactions)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
